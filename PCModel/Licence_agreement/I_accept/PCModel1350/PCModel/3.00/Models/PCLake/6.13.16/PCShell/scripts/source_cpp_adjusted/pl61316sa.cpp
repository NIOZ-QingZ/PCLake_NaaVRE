sTime = time;
TimeYears = sTime / DaysPerYear;
Day = sTime - FLOOR(TimeYears) * DaysPerYear;
Years = YearZero + TimeYears;
uTm = IF (FALSE EQ InclSeason) THEN cTmAve ELSEIF (ReadTemp EQ TRUE) THEN mTemp ELSE cTmAve - cTmVar * COS(2.0*Pi*(sTime + TenDays - cTimeLag) / DaysPerYear) ENDIF;
uVWind = IF (ReadVWind EQ TRUE)THEN mVWind ELSE cVWind ENDIF;
ufDay = IF (FALSE EQ InclSeason) THEN cfDayAve ELSE cfDayAve - cfDayVar * COS(2.0*Pi*(sTime+TenDays) / DaysPerYear) ENDIF;
uLDay = IF (FALSE EQ InclSeason) THEN cLDayAve ELSEIF (ReadLOut EQ TRUE) THEN 0.0 ELSE cLDayAve - cLDayVar * COS(2.0*Pi*(sTime+TenDays) / DaysPerYear) ENDIF;
uLOut = IF (FALSE EQ InclSeason) THEN uLDay / SecsPerDay / ufDay ELSEIF (ReadLOut EQ TRUE) THEN mLOut / ufDay ELSE uLDay / SecsPerDay / ufDay ENDIF;
uLPARSurf = fPAR * (1.0 - fRefl) * uLOut;
aExtPhyt = cExtSpDiat * sDDiatW + cExtSpGren * sDGrenW + cExtSpBlue * sDBlueW;
aExtDet = cExtSpDet * sDDetW;
aExtIM = cExtSpIM * sDIMW;
aExtCoefOpen = cExtWat + aExtIM + aExtDet + aExtPhyt;
uQInSeason = IF (FALSE EQ UseSeasonLoad) THEN 0.0 ELSEIF (Day LT cDayApril1 - 0.5*cLengChange) THEN cQInWin ELSEIF (Day LT cDayApril1 + 0.5*cLengChange) THEN 0.5*(cQInWin + cQInSum) + 0.5*(cQInWin - cQInSum) * COS(Pi/cLengChange * (Day - cDayApril1)) ELSEIF (Day LT cDayOct1 - 0.5*cLengChange) THEN cQInSum ELSEIF (Day LT cDayOct1 + 0.5*cLengChange) THEN 0.5*(cQInWin + cQInSum) - 0.5*(cQInWin - cQInSum) * COS(Pi/cLengChange * (Day - cDayOct1)) ELSE cQInWin ENDIF;
uQEvSinus = cQEvAve - cQEvVar * COS(2.0*Pi * (sTime + TenDays - cTimeLag) / DaysPerYear);
uQEv = IF (FALSE EQ InclSeason) THEN cQEvAve ELSEIF (ReadQEv EQ TRUE) THEN mQEv ELSE uQEvSinus ENDIF;
uQInExtra = IF ((Day GE cDayApril1 - 0.5*cLengChange) AND (Day LT cDayApril1 + 0.5*cLengChange)) THEN cQInExtraApril1 ELSEIF ( (Day GE cDayOct1 - 0.5*cLengChange) AND (Day LT cDayOct1 + 0.5*cLengChange) ) THEN cQInExtraOct1 ELSE 0.0 ENDIF;
uQOutExtra = IF ((Day GE cDayApril1 - 0.5*cLengChange) AND (Day LT cDayApril1 + 0.5*cLengChange)) THEN cQOutExtraApril1 ELSEIF ( (Day GE cDayOct1 - 0.5*cLengChange) AND (Day LT cDayOct1 + 0.5*cLengChange) ) THEN cQOutExtraOct1 ELSE 0.0 ENDIF;
uQIn = IF (ReadQIn EQ TRUE) THEN mQIn ELSEIF (UseSeasonLoad EQ TRUE) THEN uQInSeason + uQInExtra ELSE cQIn + uQInExtra ENDIF;
uQOut = IF (ReadQOut EQ TRUE) THEN MAX(mQOut, (sDepthW - cDepthWMax) * mmPerm) ELSE MAX(0.0, (uQIn - uQInExtra) - uQEv - cQInf) + uQOutExtra ENDIF;
uQDil = uQIn - uQEv - cQInf;
ukDil = uQDil / mmPerm / sDepthW;
ukDilWat = uQIn / mmPerm / sDepthW;
ukOut = uQOut / mmPerm / sDepthW;
uTauWat = 1.0 / (ukDilWat+NearZero);
uTauSubst = 1.0 / (ukDil+NearZero);
vTranDepthW = IF (FALSE EQ InclTran) THEN 0.0 ELSEIF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN (uQIn - uQEv - cQInf - uQOut) / mmPerm ELSE ((uQIn - uQEv - cQInf - uQOut) / mmPerm) / (1.0 + fMarsh) ENDIF;
akExchM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN kExchMaxM * hfMarsh /(hfMarsh + fMarsh) + vTranDepthW / sDepthWM ELSE 0.0 ENDIF;
afVolMarsh = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN fMarsh * sDepthWM / sDepthW ELSE 0.0 ENDIF;
akExchL = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchM * afVolMarsh ELSE 0.0 ENDIF;
oDPhytW = sDDiatW + sDGrenW + sDBlueW;
oPPhytW = sPDiatW + sPGrenW + sPBlueW;
oNPhytW = sNDiatW + sNGrenW + sNBlueW;
aDPhytS = IF (InclPhytS EQ TRUE) THEN sDDiatS + sDGrenS + sDBlueS ELSE NearZero ENDIF;
aPPhytS = IF (InclPhytS EQ TRUE) THEN sPDiatS + sPGrenS + sPBlueS ELSE NearZero ENDIF;
aNPhytS = IF (InclPhytS EQ TRUE) THEN sNDiatS + sNGrenS + sNBlueS ELSE NearZero ENDIF;
oDOMW = sDDetW + oDPhytW;
oDSestW = oDOMW + sDIMW;
oPOMW = oPPhytW + sPDetW;
oPSestW = oPPhytW + sPDetW + sPAIMW;
oPInorgW = sPO4W + sPAIMW;
oPTotW = oPSestW + sPO4W;
oNDissW = sNO3W + sNH4W;
oNOMW = oNPhytW + sNDetW;
oNSestW = oNOMW;
oNkjW = oNSestW + sNH4W;
oNTotW = oNkjW + sNO3W;
bPorS = (1.0 - fDTotS0) * (fDOrgS0 * cRhoOM + (1 - fDOrgS0) * cRhoIM) / cRhoWat / ( fDTotS0 + (1.0 - fDTotS0) * (fDOrgS0 * cRhoOM + (1 - fDOrgS0) * cRhoIM) / cRhoWat );
bPorCorS = POW(bPorS , (bPorS + 1.0));
aDTotS = sDIMS + sDHumS + sDDetS;
aRhoTotS = aDTotS / cDepthS;
aRhoSolidS = (sDIMS * cRhoIM + (sDHumS + sDDetS) * cRhoOM) / aDTotS;
afDTotS = 1.0 / (1.0 + bPorS/(1.0-bPorS) * cRhoWat / aRhoSolidS);
afDOrgS = (sDHumS + sDDetS) / aDTotS;
afDetS = sDDetS / (sDHumS + sDDetS);
afDetTotS = sDDetS / (sDIMS + sDHumS + sDDetS);
aPInorgS = sPO4S + sPAIMS;
aPTotAvailS = sPDetS + aPInorgS + aPPhytS;
aPTotS = aPTotAvailS + sPHumS;
afPInorgS = aPInorgS / aDTotS;
afPTotS = aPTotS / aDTotS;
afPO4S = sPO4S / (aPTotAvailS + NearZero);
oPO4S = sPO4S / cDepthS / bPorS;
aNDissS = sNH4S + sNO3S;
aNkjAvailS = sNDetS + aNPhytS + sNH4S;
aNkjS = aNkjAvailS + sNHumS;
aNTotAvailS = aNkjAvailS + sNO3S;
aNTotS = aNkjS + sNO3S;
afNInorgS = aNDissS / aDTotS;
afNTotS = aNTotS / aDTotS;
oNO3S = sNO3S / cDepthS / bPorS;
oNH4S = sNH4S / cDepthS / bPorS;
oNDissS = aNDissS / cDepthS / bPorS;
rPDIMW = sPAIMW / sDIMW;
rPDIMS = sPAIMS / sDIMS;
rPDDetW = sPDetW / (sDDetW+NearZero);
rNDDetW = sNDetW / (sDDetW+NearZero);
rSiDDetW = sSiDetW / (sDDetW+NearZero);
rPDHumS = sPHumS / (sDHumS+NearZero);
rNDHumS = sNHumS / (sDHumS+NearZero);
rPDDetS = sPDetS / (sDDetS+NearZero);
rNDDetS = sNDetS / (sDDetS+NearZero);
rSiDDetS = sSiDetS / (sDDetS+NearZero);
oDPhytWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sDDiatWM + sDGrenWM + sDBlueWM ELSE 0.0 ENDIF;
oPPhytWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sPDiatWM + sPGrenWM + sPBlueWM ELSE 0.0 ENDIF;
oNPhytWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sNDiatWM + sNGrenWM + sNBlueWM ELSE 0.0 ENDIF;
oSiDiatWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN cSiDDiat * sDDiatWM ELSE 0.0 ENDIF;
oDOMWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sDDetWM + oDPhytWM ELSE 0.0 ENDIF;
oDSestWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN oDOMWM + sDIMWM ELSE 0.0 ENDIF;
oPOMWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN oPPhytWM + sPDetWM ELSE 0.0 ENDIF;
oPSestWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN oPPhytWM + sPDetWM + sPAIMWM ELSE 0.0 ENDIF;
oPInorgWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sPO4WM + sPAIMWM ELSE 0.0 ENDIF;
oPTotWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN oPSestWM + sPO4WM ELSE 0.0 ENDIF;
oNDissWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sNO3WM + sNH4WM ELSE 0.0 ENDIF;
oNOMWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN oNPhytWM + sNDetWM ELSE 0.0 ENDIF;
oNSestWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN oNOMWM ELSE 0.0 ENDIF;
oNkjWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN oNSestWM + sNH4WM ELSE 0.0 ENDIF;
oNTotWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN oNkjWM + sNO3WM ELSE 0.0 ENDIF;
bPorSM = (1.0 - fDTotSM0) * (fDOrgSM0 * cRhoOM +(1 - fDOrgSM0) * cRhoIM) / cRhoWat /(fDTotSM0 + (1.0 - fDTotSM0) * (fDOrgSM0 * cRhoOM +(1 - fDOrgSM0) * cRhoIM) / cRhoWat);
bPorCorSM = POW(bPorSM , (bPorSM + 1.0));
aDTotSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sDIMSM + sDHumSM + sDDetSM ELSE 0.0 ENDIF;
aRhoTotSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN aDTotSM / cDepthSM ELSE 0.0 ENDIF;
aRhoSolidSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN (sDIMSM * cRhoIM +(sDHumSM + sDDetSM) * cRhoOM) / aDTotSM ELSE 0.0 ENDIF;
afDTotSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN 1.0 /(1.0 + bPorSM/(1.0-bPorSM) * cRhoWat / aRhoSolidSM) ELSE 0.0 ENDIF;
afDOrgSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN (sDHumSM + sDDetSM) / aDTotSM ELSE 0.0 ENDIF;
afDetSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sDDetSM /(sDHumSM + sDDetSM) ELSE 0.0 ENDIF;
afDetTotSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sDDetSM /(sDIMSM + sDHumSM + sDDetSM) ELSE 0.0 ENDIF;
aPInorgSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sPO4SM + sPAIMSM ELSE 0.0 ENDIF;
aPTotAvailSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sPDetSM + aPInorgSM ELSE 0.0 ENDIF;
aPTotSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN aPTotAvailSM + sPHumSM ELSE 0.0 ENDIF;
afPInorgSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN aPInorgSM / aDTotSM ELSE 0.0 ENDIF;
afPTotSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN aPTotSM / aDTotSM ELSE 0.0 ENDIF;
afPO4SM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sPO4SM /(aPTotAvailSM + NearZero) ELSE 0.0 ENDIF;
oPO4SM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sPO4SM / cDepthSM / bPorSM ELSE 0.0 ENDIF;
aNDissSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sNH4SM + sNO3SM ELSE 0.0 ENDIF;
aNkjAvailSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sNDetSM + sNH4SM ELSE 0.0 ENDIF;
aNkjSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN aNkjAvailSM + sNHumSM ELSE 0.0 ENDIF;
aNTotAvailSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN aNkjAvailSM + sNO3SM ELSE 0.0 ENDIF;
aNTotSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN aNkjSM + sNO3SM ELSE 0.0 ENDIF;
afNInorgSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN aNDissSM / aDTotSM ELSE 0.0 ENDIF;
afNTotSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN aNTotSM / aDTotSM ELSE 0.0 ENDIF;
oNO3SM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sNO3SM / cDepthSM / bPorSM ELSE 0.0 ENDIF;
oNH4SM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sNH4SM / cDepthSM / bPorSM ELSE 0.0 ENDIF;
oNDissSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN aNDissSM / cDepthSM / bPorSM ELSE 0.0 ENDIF;
rPDIMWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sPAIMWM / sDIMWM ELSE 0.0 ENDIF;
rPDIMSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sPAIMSM / sDIMSM ELSE 0.0 ENDIF;
rPDDetWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sPDetWM /(sDDetWM+NearZero) ELSE 0.0 ENDIF;
rNDDetWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sNDetWM /(sDDetWM+NearZero) ELSE 0.0 ENDIF;
rSiDDetWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sSiDetWM /(sDDetWM+NearZero) ELSE 0.0 ENDIF;
rPDHumSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sPHumSM /(sDHumSM+NearZero) ELSE 0.0 ENDIF;
rNDHumSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sNHumSM /(sDHumSM+NearZero) ELSE 0.0 ENDIF;
rPDDetSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sPDetSM /(sDDetSM+NearZero) ELSE 0.0 ENDIF;
rNDDetSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sNDetSM /(sDDetSM+NearZero) ELSE 0.0 ENDIF;
rSiDDetSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sSiDetSM /(sDDetSM+NearZero) ELSE 0.0 ENDIF;
aDTotM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN ((sDIMWM + sDDetWM + oDPhytWM + sDZooM) * sDepthWM + sDIMSM + sDHumSM + sDDetSM + sDShootPhra + sDRootPhra) * fMarsh ELSE 0.0 ENDIF;
aPTotM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN ((sPO4WM + sPDetWM + sPAIMWM + oPPhytWM + sPZooM) * sDepthWM + sPO4SM + sPHumSM + sPDetSM + sPAIMSM + sPShootPhra + sPRootPhra) * fMarsh ELSE 0.0 ENDIF;
aNTotM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN ((sNH4WM + sNO3WM + sNDetWM + oNPhytWM + sNZooM) * sDepthWM + sNH4SM + sNO3SM + sNHumSM + sNDetSM + sNShootPhra + sNRootPhra) * fMarsh ELSE 0.0 ENDIF;
aSiTotM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN ((sSiO2WM + sSiDetWM + oSiDiatWM) * sDepthWM + sSiDetSM) * fMarsh ELSE 0.0 ENDIF;
iPPulse = 1;
uPLoadSeason = IF (FALSE EQ UseSeasonLoad) THEN 0.0 ELSEIF (Day LT cDayApril1 - 0.5*cLengChange) THEN cPLoadWin ELSEIF (Day LT cDayApril1 + 0.5*cLengChange) THEN 0.5*(cPLoadWin + cPLoadSum) + 0.5*(cPLoadWin - cPLoadSum) * COS(Pi/cLengChange * (Day - cDayApril1)) ELSEIF (Day LT cDayOct1 - 0.5*cLengChange) THEN cPLoadSum ELSEIF (Day LT cDayOct1 + 0.5*cLengChange) THEN 0.5*(cPLoadWin + cPLoadSum) - 0.5*(cPLoadWin - cPLoadSum) * COS(Pi/cLengChange * (Day - cDayOct1)) ELSE cPLoadWin ENDIF;
uPLoad = IF (ReadPLoad EQ TRUE AND ReadNutFrac EQ TRUE) THEN mPLoadPO4 + mPLoadOrg ELSEIF (ReadPLoad EQ TRUE AND FALSE EQ ReadNutFrac) THEN mPLoad ELSEIF (UsePulseLoad EQ TRUE) THEN 0.0 ELSEIF (UseSeasonLoad EQ TRUE) THEN uPLoadSeason ELSE cPLoad ENDIF;
uPLoadPO4 = IF (FALSE EQ ReadPLoad) THEN fPO4In * uPLoad ELSEIF (ReadNutFrac EQ TRUE) THEN mPLoadPO4 ELSE fPO4In * mPLoad ENDIF;
uPLoadOrg = IF (FALSE EQ ReadPLoad) THEN (1.0 - fPO4In) * uPLoad ELSEIF (ReadNutFrac EQ TRUE) THEN mPLoadOrg ELSE (1.0 - fPO4In) * mPLoad ENDIF;
uPLoadPhytTot = IF (FALSE EQ InclSeason) THEN (((fPhytInSum + fPhytInWin)/2)*uPLoadOrg) ELSEIF (ReadPLoadPhyt EQ TRUE) THEN mPLoadPhytTot ELSE ((fPhytInSum+fPhytInWin)/2.0 - (fPhytInSum-fPhytInWin)/2.0 * COS(2.0*Pi * (sTime + TenDays - cTimeLag) / DaysPerYear)) * uPLoadOrg ENDIF;
uPLoadDet = uPLoadOrg - uPLoadPhytTot;
uPLoadAIM = 0.0;
iNPulse = 1;
uNLoadSeason = IF (FALSE EQ UseSeasonLoad) THEN 0.0 ELSEIF (Day LT cDayApril1 - 0.5*cLengChange) THEN cNLoadWin ELSEIF (Day LT cDayApril1 + 0.5*cLengChange) THEN 0.5*(cNLoadWin + cNLoadSum) + 0.5*(cNLoadWin - cNLoadSum) * COS(Pi/cLengChange * (Day - cDayApril1)) ELSEIF (Day LT cDayOct1 - 0.5*cLengChange) THEN cNLoadSum ELSEIF (Day LT cDayOct1 + 0.5*cLengChange) THEN 0.5*(cNLoadWin + cNLoadSum) - 0.5*(cNLoadWin - cNLoadSum) * COS(Pi/cLengChange * (Day - cDayOct1)) ELSE cNLoadWin ENDIF;
uNLoadPhytTot = cNPPhytIn * uPLoadPhytTot;
uNLoad = IF (ReadNLoad EQ TRUE AND ReadNutFrac EQ TRUE) THEN mNLoadNH4 + mNLoadNO3 + mNLoadOrg ELSEIF (ReadNLoad EQ TRUE AND FALSE EQ ReadNutFrac) THEN mNLoad ELSEIF (UsePulseLoad EQ TRUE) THEN 0.0 ELSEIF (ReadPLoad EQ TRUE) THEN cNPLoadMeas * uPLoad ELSEIF (UseSeasonLoad EQ TRUE) THEN uNLoadSeason ELSE cNLoad ENDIF;
uNLoadDet = IF (FALSE EQ ReadNLoad) THEN MIN(cNPDetIn * uPLoadDet, uNLoad - uNLoadPhytTot) ELSEIF (ReadNutFrac EQ TRUE) THEN mNLoadOrg - uNLoadPhytTot ELSE MIN(cNPDetIn * uPLoadDet, uNLoad - uNLoadPhytTot) ENDIF;
uNLoadOrg = IF (FALSE EQ ReadNLoad) THEN uNLoadPhytTot + uNLoadDet ELSEIF (ReadNutFrac EQ TRUE) THEN mNLoadOrg ELSE uNLoadPhytTot + uNLoadDet ENDIF;
uNLoadDiss = IF (FALSE EQ ReadNLoad) THEN uNLoad - uNLoadOrg ELSEIF (ReadNutFrac EQ TRUE) THEN 0.0 ELSE uNLoad - uNLoadOrg ENDIF;
uNLoadNH4 = IF (FALSE EQ ReadNLoad) THEN fNH4DissIn * uNLoadDiss ELSEIF (ReadNutFrac EQ TRUE) THEN mNLoadNH4 ELSE fNH4DissIn * uNLoadDiss ENDIF;
uNLoadNO3 = IF (FALSE EQ ReadNLoad) THEN (1.0 - fNH4DissIn) * uNLoadDiss ELSEIF (ReadNutFrac EQ TRUE) THEN mNLoadNO3 ELSE (1.0 - fNH4DissIn) * uNLoadDiss ENDIF;
uNTotIn = uNLoad / (uQIn / mmPerm + NearZero);
uDLoadDet = IF (ReadDLoadDet EQ TRUE) THEN mDLoadDet ELSE uNLoadDet / cNDDetIn ENDIF;
uDLoadPhytTot = uNLoadPhytTot / cNDPhytIn;
uDLoadIM = IF (ReadDLoadIM EQ TRUE) THEN mDLoadIM ELSE cDIMIn * uQIn / mmPerm ENDIF;
uDLoad = uDLoadIM + uDLoadDet + uDLoadPhytTot;
uPTotIn = uPLoad / (uQIn / mmPerm + NearZero);
uDLoadDiat = fDiatPhytIn * uDLoadPhytTot;
uPLoadDiat = fDiatPhytIn * uPLoadPhytTot;
uNLoadDiat = fDiatPhytIn * uNLoadPhytTot;
uDLoadGren = fGrenPhytIn * uDLoadPhytTot;
uPLoadGren = fGrenPhytIn * uPLoadPhytTot;
uNLoadGren = fGrenPhytIn * uNLoadPhytTot;
uDLoadBlue = fBluePhytIn * uDLoadPhytTot;
uPLoadBlue = fBluePhytIn * uPLoadPhytTot;
uNLoadBlue = fBluePhytIn * uNLoadPhytTot;
wDDilIM = ukDil * sDIMW;
wDDilDet = ukDil * sDDetW;
wPDilPO4 = ukDil * sPO4W;
wPDilDet = ukDil*sPDetW;
wPDilAIM = ukDil * sPAIMW;
wNDilNH4 = ukDil * sNH4W;
wNDilNO3 = ukDil * sNO3W;
wNDilDet = ukDil * sNDetW;
wO2Inflow = ukDilWat * cO2In;
wO2Outfl = ukDil * sO2W;
wDDilDiat = ukDil * sDDiatW;
wPDilDiat = ukDil * sPDiatW;
wNDilDiat = ukDil * sNDiatW;
wDDilGren = ukDil * sDGrenW;
wPDilGren = ukDil * sPGrenW;
wNDilGren = ukDil * sNGrenW;
wDDilBlue = ukDil * sDBlueW;
wPDilBlue = ukDil * sPBlueW;
wNDilBlue = ukDil * sNBlueW;
wDDilPhyt = wDDilDiat + wDDilGren + wDDilBlue;
wPDilPhyt = wPDilDiat + wPDilGren + wPDilBlue;
wNDilPhyt = wNDilDiat + wNDilGren + wNDilBlue;
wDOutflTot = ukOut * oDSestW;
wPOutflTot = ukOut * oPTotW;
wNOutflTot = ukOut * oNTotW;
wDTranDiat = IF (FALSE EQ InclTran) THEN 0.0 ELSE uDLoadDiat / sDepthW - wDDilDiat ENDIF;
wPTranDiat = IF (FALSE EQ InclTran) THEN 0.0 ELSE uPLoadDiat / sDepthW - wPDilDiat ENDIF;
wNTranDiat = IF (FALSE EQ InclTran) THEN 0.0 ELSE uNLoadDiat / sDepthW - wNDilDiat ENDIF;
wDTranGren = IF (FALSE EQ InclTran) THEN 0.0 ELSE uDLoadGren / sDepthW - wDDilGren ENDIF;
wPTranGren = IF (FALSE EQ InclTran) THEN 0.0 ELSE uPLoadGren / sDepthW - wPDilGren ENDIF;
wNTranGren = IF (FALSE EQ InclTran) THEN 0.0 ELSE uNLoadGren / sDepthW - wNDilGren ENDIF;
wDTranBlue = IF (FALSE EQ InclTran) THEN 0.0 ELSE uDLoadBlue / sDepthW - wDDilBlue ENDIF;
wPTranBlue = IF (FALSE EQ InclTran) THEN 0.0 ELSE uPLoadBlue / sDepthW - wPDilBlue ENDIF;
wNTranBlue = IF (FALSE EQ InclTran) THEN 0.0 ELSE uNLoadBlue / sDepthW - wNDilBlue ENDIF;
wDTranPhyt = IF (FALSE EQ InclTran) THEN 0.0 ELSE wDTranDiat + wDTranGren + wDTranBlue ENDIF;
wPTranPhyt = IF (FALSE EQ InclTran) THEN 0.0 ELSE wPTranDiat + wPTranGren + wPTranBlue ENDIF;
wNTranPhyt = IF (FALSE EQ InclTran) THEN 0.0 ELSE wNTranDiat + wNTranGren + wNTranBlue ENDIF;
uSiLoadSiO2 = cSiO2In * uQIn / mmPerm;
uSiLoadDet = cSiDDetIn * uDLoadDet;
uSiLoadDiat = cSiDDiat * uDLoadDiat;
uSiLoad = uSiLoadSiO2 + uSiLoadDet + uSiLoadDiat;
wSiDilSiO2 = ukDil * sSiO2W;
wSiDilDet = ukDil * sSiDetW;
wSiDilDiat = cSiDDiat * wDDilDiat;
wSiOutflTot = ukOut * (sSiO2W + sSiDetW + cSiDDiat * sDDiatW);
wSiTranSiO2 = IF (FALSE EQ InclTran) THEN 0.0 ELSE uSiLoadSiO2 / sDepthW - wSiDilSiO2 ENDIF;
wSiTranDetW = IF (FALSE EQ InclTran) THEN 0.0 ELSE uSiLoadDet / sDepthW - wSiDilDet ENDIF;
tSiTranTotT = IF (FALSE EQ InclTran) THEN 0.0 ELSE uSiLoadSiO2 + uSiLoadDet + uSiLoadDiat - (wSiDilDet + wSiDilSiO2 + wSiDilDiat) * sDepthW ENDIF;
wDTranZoo = IF (FALSE EQ InclTran) THEN 0.0 ELSE( ukDilWat * cDZooIn - ukDil*sDZoo) ENDIF;
wPTranZoo = IF (FALSE EQ InclTran) THEN 0.0 ELSE(ukDilWat * cPDZooRef*cDZooIn - ukDil*sPZoo) ENDIF;
wNTranZoo = IF (FALSE EQ InclTran) THEN 0.0 ELSE(ukDilWat * cNDZooRef*cDZooIn - ukDil * sNZoo) ENDIF;
wDTranIMW = IF (FALSE EQ InclTran) THEN 0.0 ELSE uDLoadIM / sDepthW - wDDilIM ENDIF;
wDTranDetW = IF (FALSE EQ InclTran) THEN 0.0 ELSE uDLoadDet / sDepthW - wDDilDet ENDIF;
wO2TranW = IF (FALSE EQ InclTran) THEN 0.0 ELSE wO2Inflow - wO2Outfl ENDIF;
wPTranPO4W = IF (FALSE EQ InclTran) THEN 0.0 ELSE uPLoadPO4 / sDepthW - wPDilPO4 ENDIF;
wPTranAIMW = IF (FALSE EQ InclTran) THEN 0.0 ELSE uPLoadAIM / sDepthW - wPDilAIM ENDIF;
wPTranDetW = IF (FALSE EQ InclTran) THEN 0.0 ELSE uPLoadDet / sDepthW - wPDilDet ENDIF;
wNTranNH4W = IF (FALSE EQ InclTran) THEN 0.0 ELSE uNLoadNH4 / sDepthW - wNDilNH4 ENDIF;
wNTranNO3W = IF (FALSE EQ InclTran) THEN 0.0 ELSE uNLoadNO3 / sDepthW - wNDilNO3 ENDIF;
wNTranDetW = IF (FALSE EQ InclTran) THEN 0.0 ELSE uNLoadDet / sDepthW - wNDilDet ENDIF;
wDDilTot = wDDilIM + wDDilDet + wDDilPhyt;
wPDilTot = wPDilDet + wPDilPO4 + wPDilAIM + wPDilPhyt;
wNDilTot = wNDilDet + wNDilNO3 + wNDilNH4 + wNDilPhyt;
wSiDilTot = wSiDilDet + wSiDilSiO2 + wSiDilDiat;
tDTranTotT = IF (FALSE EQ InclTran) THEN 0.0 ELSE uDLoad - wDDilTot * sDepthW ENDIF;
tPTranTotT = IF (FALSE EQ InclTran) THEN 0.0 ELSE uPLoad - wPDilTot * sDepthW ENDIF;
tNTranTotT = IF (FALSE EQ InclTran) THEN 0.0 ELSE uNLoad - wNDilTot * sDepthW ENDIF;
wDExchIMM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchM *(sDIMW - sDIMWM) ELSE 0.0 ENDIF;
wPExchPO4M = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchM *(sPO4W - sPO4WM) ELSE 0.0 ENDIF;
wPExchAIMM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchM *(sPAIMW - sPAIMWM) ELSE 0.0 ENDIF;
wNExchNH4M = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchM *(sNH4W - sNH4WM) ELSE 0.0 ENDIF;
wNExchNO3M = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchM *(sNO3W - sNO3WM) ELSE 0.0 ENDIF;
wSiExchSiO2M = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchM *(sSiO2W - sSiO2WM) ELSE 0.0 ENDIF;
wO2ExchM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchM *(sO2W - sO2WM) ELSE 0.0 ENDIF;
wDExchDetM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchM *(sDDetW - sDDetWM) ELSE 0.0 ENDIF;
wPExchDetM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchM *(sPDetW - sPDetWM) ELSE 0.0 ENDIF;
wNExchDetM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchM *(sNDetW - sNDetWM) ELSE 0.0 ENDIF;
wSiExchDetM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchM *(sSiDetW - sSiDetWM) ELSE 0.0 ENDIF;
wDExchDiatM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchM *(sDDiatW - sDDiatWM) ELSE 0.0 ENDIF;
wPExchDiatM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchM *(sPDiatW - sPDiatWM) ELSE 0.0 ENDIF;
wNExchDiatM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchM *(sNDiatW - sNDiatWM) ELSE 0.0 ENDIF;
wSiExchDiatM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN cSiDDiat * wDExchDiatM ELSE 0.0 ENDIF;
wDExchGrenM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchM *(sDGrenW - sDGrenWM) ELSE 0.0 ENDIF;
wPExchGrenM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchM *(sPGrenW - sPGrenWM) ELSE 0.0 ENDIF;
wNExchGrenM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchM *(sNGrenW - sNGrenWM) ELSE 0.0 ENDIF;
wDExchBlueM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchM *(sDBlueW - sDBlueWM) ELSE 0.0 ENDIF;
wPExchBlueM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchM *(sPBlueW - sPBlueWM) ELSE 0.0 ENDIF;
wNExchBlueM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchM *(sNBlueW - sNBlueWM) ELSE 0.0 ENDIF;
wDExchZooM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchM *(sDZoo - sDZooM) ELSE 0.0 ENDIF;
wPExchZooM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchM *(sPZoo - sPZooM) ELSE 0.0 ENDIF;
wNExchZooM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchM *(sNZoo - sNZooM) ELSE 0.0 ENDIF;
wDExchIM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchL *(sDIMW - sDIMWM) ELSE 0.0 ENDIF;
wPExchPO4 = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchL *(sPO4W - sPO4WM) ELSE 0.0 ENDIF;
wPExchAIM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchL *(sPAIMW - sPAIMWM) ELSE 0.0 ENDIF;
wNExchNH4 = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchL *(sNH4W - sNH4WM) ELSE 0.0 ENDIF;
wNExchNO3 = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchL *(sNO3W - sNO3WM) ELSE 0.0 ENDIF;
wSiExchSiO2 = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchL *(sSiO2W - sSiO2WM) ELSE 0.0 ENDIF;
wO2Exch = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchL *(sO2W - sO2WM) ELSE 0.0 ENDIF;
wDExchDet = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchL *(sDDetW - sDDetWM) ELSE 0.0 ENDIF;
wPExchDet = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchL *(sPDetW - sPDetWM) ELSE 0.0 ENDIF;
wNExchDet = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchL *(sNDetW - sNDetWM) ELSE 0.0 ENDIF;
wSiExchDet = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchL *(sSiDetW - sSiDetWM) ELSE 0.0 ENDIF;
wDExchDiat = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchL *(sDDiatW - sDDiatWM) ELSE 0.0 ENDIF;
wPExchDiat = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchL *(sPDiatW - sPDiatWM) ELSE 0.0 ENDIF;
wNExchDiat = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchL *(sNDiatW - sNDiatWM) ELSE 0.0 ENDIF;
wSiExchDiat = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN cSiDDiat * wDExchDiat ELSE 0.0 ENDIF;
wDExchGren = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchL *(sDGrenW - sDGrenWM) ELSE 0.0 ENDIF;
wPExchGren = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchL *(sPGrenW - sPGrenWM) ELSE 0.0 ENDIF;
wNExchGren = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchL *(sNGrenW - sNGrenWM) ELSE 0.0 ENDIF;
wDExchBlue = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchL *(sDBlueW - sDBlueWM) ELSE 0.0 ENDIF;
wPExchBlue = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchL *(sPBlueW - sPBlueWM) ELSE 0.0 ENDIF;
wNExchBlue = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchL *(sNBlueW - sNBlueWM) ELSE 0.0 ENDIF;
wDExchZoo = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchL *(sDZoo - sDZooM) ELSE 0.0 ENDIF;
wPExchZoo = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchL *(sPZoo - sPZooM) ELSE 0.0 ENDIF;
wNExchZoo = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN akExchL *(sNZoo - sNZooM) ELSE 0.0 ENDIF;
tPInfPO4W = IF (cQInf GE 0.0) THEN cQInf / mmPerm * sPO4W ELSE cQInf / mmPerm * oPO4S ENDIF;
tNInfNH4W = IF (cQInf GE 0.0) THEN cQInf / mmPerm * sNH4W ELSE cQInf / mmPerm * oNH4S ENDIF;
tNInfNO3W = IF (cQInf GE 0.0) THEN cQInf / mmPerm * sNO3W ELSE cQInf / mmPerm * oNO3S ENDIF;
tPInfPO4S = IF (cQInf GE 0.0) THEN cQInf / mmPerm * oPO4S ELSE cQInf / mmPerm * cPO4Ground ENDIF;
tNInfNH4S = IF (cQInf GE 0.0) THEN cQInf / mmPerm * oNH4S ELSE cQInf / mmPerm * cNH4Ground ENDIF;
tNInfNO3S = IF (cQInf GE 0.0) THEN cQInf / mmPerm * oNO3S ELSE cQInf / mmPerm * cNO3Ground  ENDIF;
tNH4LoadS = fNH4LoadS * cNLoadS;
tNO3LoadS = cNLoadS - tNH4LoadS;
uDErosIM = (1.0 - fDOrgSoil) * cDErosTot;
uDErosIMS = fSedErosIM * uDErosIM;
uDErosIMW = uDErosIM - uDErosIMS;
uDErosOM = fDOrgSoil * cDErosTot;
uPErosOM = cPDSoilOM * uDErosOM;
uNErosOM = cNDSoilOM * uDErosOM;
uO2Sat = 14.652 - 0.41022 * uTm + 0.007991 * uTm*uTm - 0.000077774 * uTm*uTm*uTm;
kAer = cAerRoot * POW(uVWind , (0.5)) + cAerLin * uVWind + cAerSquare * uVWind*uVWind;
uFunTmAer = POW(cThetaAer , (uTm-cTmRef));
aFunLemnAer = 1.0;
tO2Aer = kAer * uFunTmAer * (uO2Sat - sO2W) * aFunLemnAer;
uFunTmFish = IF (InclWeb EQ TRUE) THEN EXP( -0.5/(cSigTmFish*cSigTmFish) * ((uTm - cTmOptFish)*(uTm - cTmOptFish) - (cTmRef - cTmOptFish)*(cTmRef - cTmOptFish))) ELSE 0.0 ENDIF;
tDTurbFish = IF (InclWeb EQ TRUE) THEN (kTurbFish * uFunTmFish * sDFiAd) ELSE 0.0 ENDIF;
tDTurbFishIM = fLutum * sDIMS / (fLutum * sDIMS + sDDetS) * tDTurbFish;
aFunVegResus = MAX(1.0 - kVegResus * sDVeg, 0.0);
aFunDimSusp = IF (uTm GE 0.1) THEN cSuspRef * ((cSuspMin + cSuspMax / (1.0 + EXP(cSuspSlope * (sDepthW - hDepthSusp)))) * POW(((cFetch +NearZero)/ cFetchRef) , (0.5))) ELSE 0.0 ENDIF;
tDResusTauDead = MIN(aFunDimSusp, POW(aFunDimSusp +NearZero , (0.5))) * POW(fLutum / fLutumRef , (0.5)) * bPorS;
tDResusBareDead = tDResusTauDead + tDTurbFish;
tDResusDead = tDResusBareDead * aFunVegResus;
tDResusIM = fLutum * sDIMS / (fLutum * sDIMS + sDDetS) * tDResusDead;
tDResusDet = sDDetS / (fLutum * sDIMS + sDDetS) * tDResusDead;
akResusPhytRef = kResusPhytMax * (1.0 - EXP(cResusPhytExp * tDResusDead));
tDResusPhytTot = akResusPhytRef * aDPhytS;
tPResusDet = rPDDetS * tDResusDet;
tPResusPO4 = sPO4S / sDDetS * tDResusDet;
tPResusAIM = sPAIMS / sDIMS * tDResusIM;
tNResusNO3 = sNO3S / sDDetS * tDResusDet;
tNResusNH4 = sNH4S / sDDetS * tDResusDet;
tNResusDet = rNDDetS * tDResusDet;
tSiResusDet = rSiDDetS * tDResusDet;
aFunTauSetOM = MIN(1.0 / POW(aFunDimSusp +NearZero , (0.5)), 1.0);
aFunTauSetIM = aFunTauSetOM;
uFunTmSet = POW(cThetaSet , (uTm-cTmRef));
uCorVSetIM = aFunTauSetIM * POW((fLutumRef/fLutum) , (0.5)) * uFunTmSet * cVSetIM;
tDSetIM = uCorVSetIM * sDIMW;
tPSetAIM = sPAIMW / sDIMW * tDSetIM;
uCorVSetDet = cVSetDet * aFunTauSetOM * uFunTmSet;
tDSetDet = uCorVSetDet * sDDetW;
tPSetDet = uCorVSetDet * sPDetW;
tNSetDet = uCorVSetDet * sNDetW;
tSiSetDet = uCorVSetDet * sSiDetW;
kPMinDetW = kDMinDetW;
kNMinDetW = kDMinDetW;
kSiMinDetW = kDMinDetW;
uFunTmMinW = POW(cThetaMinW , (uTm-cTmRef));
wDMinDetW = kDMinDetW * uFunTmMinW * sDDetW;
wPMinDetW = kPMinDetW * uFunTmMinW * sPDetW;
wNMinDetW = kNMinDetW * uFunTmMinW * sNDetW;
wSiMinDetW = kSiMinDetW * uFunTmMinW * sSiDetW;
aCorO2BOD = sO2W / (hO2BOD + sO2W);
wO2MinDetW = molO2molC * cCPerDW * aCorO2BOD * wDMinDetW;
wDDenitW = sNO3W*sNO3W / (hNO3Denit*hNO3Denit + sNO3W*sNO3W) * (1.0 - aCorO2BOD) * wDMinDetW;
wNDenitW = NO3PerC * molNmolC * cCPerDW * wDDenitW;
uFunTmNitr = POW(cThetaNitr , (uTm-cTmRef));
aCorO2NitrW = sO2W*sO2W / (hO2Nitr*hO2Nitr + sO2W*sO2W);
wNNitrW = kNitrW * uFunTmNitr * aCorO2NitrW * sNH4W;
wO2NitrW = O2PerNH4 * molO2molN * wNNitrW;
kPMinDetS = kDMinDetS;
kNMinDetS = kDMinDetS;
kSiMinDetS = kDMinDetS;
uFunTmMinS = POW(cThetaMinS , (uTm-cTmRef));
tDMinDetS = kDMinDetS * uFunTmMinS * sDDetS;
tPMinDetS = kPMinDetS * uFunTmMinS * sPDetS;
tNMinDetS = kNMinDetS * uFunTmMinS * sNDetS;
tSiMinDetS = kSiMinDetS * uFunTmMinS * sSiDetS;
uFunTmDif = POW(cThetaDif , (uTm-cTmRef));
akO2DifCor = kO2Dif * uFunTmDif * cTurbDifO2 * bPorCorS;
tSOD = (molO2molC * cCPerDW * (1.0 - fRefrDetS) * tDMinDetS + O2PerNH4 * molO2molN * kNitrS * uFunTmNitr * sNH4S) / cDepthS;
aDepthOxySed = POW((2.0 * sO2W * akO2DifCor / tSOD) , (0.5));
afOxySed = aDepthOxySed / cDepthS;
tDMinOxyDetS = afOxySed * (1.0 - fRefrDetS) * tDMinDetS;
tO2MinDetS = molO2molC * cCPerDW * tDMinOxyDetS;
tDDenitS = oNO3S*oNO3S / (hNO3Denit*hNO3Denit + oNO3S*oNO3S) * (1.0 - afOxySed) * (1.0 - fRefrDetS) * tDMinDetS;
tNDenitS = NO3PerC * molNmolC * cCPerDW * tDDenitS;
tNNitrS = afOxySed * kNitrS * uFunTmNitr * sNH4S;
tO2NitrS = O2PerNH4 * molO2molN * tNNitrS;
tDMinHumS = kDMinHum * uFunTmMinS * afOxySed * sDHumS;
tPMinHumS = kDMinHum * uFunTmMinS * afOxySed * sPHumS;
tNMinHumS = kDMinHum * uFunTmMinS * afOxySed * sNHumS;
aDepthDif = fDepthDifS * cDepthS;
tPDifPO4 = kPDifPO4 * uFunTmDif * cTurbDifNut * bPorCorS * (oPO4S - sPO4W ) / aDepthDif;
tNDifNO3 = kNDifNO3 * uFunTmDif * cTurbDifNut * bPorCorS * (oNO3S - sNO3W ) / aDepthDif;
tNDifNH4 = kNDifNH4 * uFunTmDif * cTurbDifNut * bPorCorS * (oNH4S - sNH4W ) / aDepthDif;
tO2Dif = kO2Dif / aDepthDif * uFunTmDif * cTurbDifO2 * bPorCorS * sO2W;
tPDifGroundPO4 = 0.0;
tNDifGroundNO3 = 0.0;
tNDifGroundNH4 = 0.0;
aPAdsMaxW = cRelPAdsD + aCorO2BOD * cRelPAdsFe * fFeDIM + cRelPAdsAl * fAlDIM;
aKPAdsW = (1.0 - fRedMax * (1.0-aCorO2BOD)) * cKPAdsOx;
aPIsoAdsW = aPAdsMaxW * aKPAdsW * sPO4W / (1.0 + aKPAdsW * sPO4W);
aPEqIMW = aPIsoAdsW * sDIMW;
wPSorpIMW = kPSorp * (aPEqIMW - sPAIMW);
aPAdsMaxS = cRelPAdsD + afOxySed * cRelPAdsFe * fFeDIM + cRelPAdsAl * fAlDIM;
aKPAdsS = (1.0 - fRedMax * (1.0-afOxySed)) * cKPAdsOx;
aPIsoAdsS = aPAdsMaxS * aKPAdsS * oPO4S / (1.0 + aKPAdsS * oPO4S);
aPEqIMS = aPIsoAdsS * sDIMS;
tPSorpIMS = kPSorp * (aPEqIMS - sPAIMS);
tPChemPO4 = MAX( 0.0, kPChemPO4 * (oPO4S - coPO4Max) );
wDAbioIMW = (uDErosIMW - tDSetIM + tDResusIM) / sDepthW;
wDAbioDetW = (- tDSetDet + tDResusDet ) / sDepthW - wDMinDetW;
tDAbioIMS = uDErosIMS + tDSetIM - tDResusIM;
tDAbioDetS = tDSetDet - tDResusDet - tDMinDetS;
tDAbioHumS = uDErosOM + fRefrDetS * tDMinDetS - tDMinHumS;
tDAbioTotT = cDErosTot - wDMinDetW * sDepthW - (1.0 - fRefrDetS) * tDMinDetS - tDMinHumS;
wO2AbioW = tO2Aer / sDepthW - wO2MinDetW - wO2NitrW - (tO2MinDetS + tO2NitrS) / sDepthW;
wPAbioDetW = - wPMinDetW - (tPSetDet - tPResusDet) / sDepthW;
wPAbioPO4W = wPMinDetW - wPSorpIMW - tPInfPO4W / sDepthW + tPDifPO4 / sDepthW + tPResusPO4 / sDepthW;
wPAbioAIMW = (- tPSetAIM + tPResusAIM) / sDepthW + wPSorpIMW;
tPAbioDetS = - tPMinDetS + tPSetDet - tPResusDet;
tPAbioHumS = uPErosOM + fRefrDetS * tPMinDetS - tPMinHumS;
tPAbioPO4S = tPInfPO4W - tPInfPO4S + (1.0-fRefrDetS) * tPMinDetS + tPMinHumS - tPSorpIMS - tPResusPO4 - tPDifPO4 - tPDifGroundPO4 - tPChemPO4;
tPAbioAIMS = tPSetAIM - tPResusAIM + tPSorpIMS;
tPAbioTotT = uPErosOM - tPChemPO4 - tPInfPO4S - tPDifGroundPO4;
wNAbioNH4W = wNMinDetW - wNNitrW - tNInfNH4W / sDepthW + (tNDifNH4 + tNResusNH4) / sDepthW;
wNAbioNO3W = wNNitrW - wNDenitW + (tNDifNO3 + tNResusNO3 - tNInfNO3W) / sDepthW;
wNAbioDetW = - wNMinDetW - (tNSetDet - tNResusDet ) / sDepthW;
tNAbioNH4S = tNInfNH4W - tNInfNH4S + (1.0-fRefrDetS) * tNMinDetS + tNMinHumS - tNResusNH4 - tNDifNH4 - tNDifGroundNH4 - tNNitrS;
tNAbioNO3S = tNInfNO3W - tNInfNO3S + tNNitrS - tNDenitS - tNResusNO3 - tNDifNO3 - tNDifGroundNO3;
tNAbioDetS = - tNMinDetS + tNSetDet - tNResusDet;
tNAbioHumS = uNErosOM + fRefrDetS * tNMinDetS - tNMinHumS;
tNAbioTotT = uNErosOM - tNDenitS - wNDenitW * sDepthW - tNInfNH4S - tNInfNO3S - tNDifGroundNO3 - tNDifGroundNH4;
wSiAbioSiO2W = wSiMinDetW + (1.0 - fRefrDetS) * tSiMinDetS / sDepthW;
wSiAbioDetW = - wSiMinDetW - (tSiSetDet - tSiResusDet) / sDepthW;
tSiAbioDetS = - tSiMinDetS + tSiSetDet - tSiResusDet;
tSiAbioTotT = - fRefrDetS * tSiMinDetS;
uQEvPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN uQEv ELSE 0.0 ENDIF;
tPEvPO4WM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN uQEvPhra / mmPerm * sPO4WM ELSE 0.0 ENDIF;
tNEvNH4WM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN uQEvPhra / mmPerm * sNH4WM ELSE 0.0 ENDIF;
tNEvNO3WM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN uQEvPhra / mmPerm * sNO3WM ELSE 0.0 ENDIF;
tPInfPO4WM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN 0.0 ELSEIF (cQInf GE 0.0) THEN cQInf / mmPerm * sPO4WM ELSE cQInf / mmPerm * oPO4SM ENDIF;
tNInfNH4WM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN 0.0 ELSEIF (cQInf GE 0.0) THEN cQInf / mmPerm * sNH4WM ELSE cQInf / mmPerm * oNH4SM ENDIF;
tNInfNO3WM = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (cQInf GE 0.0) THEN cQInf / mmPerm * sNO3WM ELSE cQInf / mmPerm * oNO3SM ENDIF;
tPInfPO4SM = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (cQInf GE 0.0) THEN cQInf / mmPerm * oPO4SM ELSE cQInf / mmPerm * cPO4Ground ENDIF;
tNInfNH4SM = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (cQInf GE 0.0) THEN cQInf / mmPerm * oNH4SM ELSE cQInf / mmPerm * oNH4SM ENDIF;
tNInfNO3SM = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (cQInf GE 0.0) THEN cQInf / mmPerm * oNO3SM ELSE cQInf / mmPerm * oNO3SM ENDIF;
tO2AerM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN kAer * uFunTmAer *(uO2Sat - sO2WM) ELSE 0.0 ENDIF;
tDSetIMM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN cVSetIM * uFunTmSet * sDIMWM ELSE 0.0 ENDIF;
tPSetAIMM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN cVSetIM * uFunTmSet * sPAIMWM ELSE 0.0 ENDIF;
tDSetDetM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN cVSetDet * uFunTmSet * sDDetWM ELSE 0.0 ENDIF;
tPSetDetM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN cVSetDet * uFunTmSet* sPDetWM ELSE 0.0 ENDIF;
tNSetDetM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN cVSetDet * uFunTmSet* sNDetWM ELSE 0.0 ENDIF;
tSiSetDetM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN cVSetDet * uFunTmSet * sSiDetWM ELSE 0.0 ENDIF;
tDSetDiatM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN cVSetDiat * uFunTmSet * sDDiatWM ELSE 0.0 ENDIF;
tPSetDiatM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN cVSetDiat * uFunTmSet* sPDiatWM ELSE 0.0 ENDIF;
tNSetDiatM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN cVSetDiat * uFunTmSet* sNDiatWM ELSE 0.0 ENDIF;
tSiSetDiatM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN cVSetDiat * uFunTmSet * oSiDiatWM ELSE 0.0 ENDIF;
tDSetGrenM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN cVSetGren * uFunTmSet * sDGrenWM ELSE 0.0 ENDIF;
tPSetGrenM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN cVSetGren * uFunTmSet* sPGrenWM ELSE 0.0 ENDIF;
tNSetGrenM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN cVSetGren * uFunTmSet* sNGrenWM ELSE 0.0 ENDIF;
tDSetBlueM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN cVSetBlue * uFunTmSet * sDBlueWM ELSE 0.0 ENDIF;
tPSetBlueM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN cVSetBlue * uFunTmSet* sPBlueWM ELSE 0.0 ENDIF;
tNSetBlueM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN cVSetBlue * uFunTmSet* sNBlueWM ELSE 0.0 ENDIF;
tDSetPhytM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN tDSetDiatM + tDSetGrenM + tDSetBlueM ELSE 0.0 ENDIF;
tPSetPhytM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN tPSetDiatM + tPSetGrenM + tPSetBlueM ELSE 0.0 ENDIF;
tNSetPhytM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN tNSetDiatM + tNSetGrenM + tNSetBlueM ELSE 0.0 ENDIF;
tDSetTotM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN tDSetIMM + tDSetDetM + tDSetPhytM ELSE 0.0 ENDIF;
wDMinDetWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN kDMinDetW * uFunTmMinW * sDDetWM ELSE 0.0 ENDIF;
wPMinDetWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN kPMinDetW * uFunTmMinW * sPDetWM ELSE 0.0 ENDIF;
wNMinDetWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN kNMinDetW * uFunTmMinW * sNDetWM ELSE 0.0 ENDIF;
wSiMinDetWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN kSiMinDetW * uFunTmMinW * sSiDetWM ELSE 0.0 ENDIF;
aCorO2BODM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sO2WM /(hO2BOD + sO2WM) ELSE 0.0 ENDIF;
wO2MinDetWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN molO2molC * cCPerDW * aCorO2BODM * wDMinDetWM ELSE 0.0 ENDIF;
wDDenitWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sNO3WM*sNO3WM /(hNO3Denit*hNO3Denit + sNO3WM*sNO3WM) *(1.0 - aCorO2BODM) * wDMinDetWM ELSE 0.0 ENDIF;
wNDenitWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN NO3PerC * molNmolC * cCPerDW * wDDenitWM ELSE 0.0 ENDIF;
aCorO2NitrWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sO2WM * sO2WM /(hO2Nitr * hO2Nitr + sO2WM * sO2WM) ELSE 0.0 ENDIF;
wNNitrWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN kNitrW * uFunTmNitr * aCorO2NitrWM * sNH4WM ELSE 0.0 ENDIF;
wO2NitrWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN O2PerNH4 * molO2molN * wNNitrWM ELSE 0.0 ENDIF;
tDMinDetSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN kDMinDetS * uFunTmMinS * sDDetSM ELSE 0.0 ENDIF;
tPMinDetSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN kPMinDetS * uFunTmMinS * sPDetSM ELSE 0.0 ENDIF;
tNMinDetSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN kNMinDetS * uFunTmMinS * sNDetSM ELSE 0.0 ENDIF;
tSiMinDetSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN kSiMinDetS * uFunTmMinS * sSiDetSM ELSE 0.0 ENDIF;
akO2DifCorM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN kO2Dif * uFunTmDif * cTurbDifO2 * bPorCorSM ELSE 0.0 ENDIF;
tSODM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN(molO2molC * cCPerDW *(1.0 - fRefrDetS) * tDMinDetSM + O2PerNH4 * molO2molN * kNitrS * uFunTmNitr * sNH4SM) / cDepthSM ELSE 0.0 ENDIF;
aDepthOxySedM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN POW((2.0 * sO2WM * akO2DifCorM / tSODM) , (0.5)) ELSE 0.0 ENDIF;
afOxySedM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN aDepthOxySedM / cDepthSM ELSE 0.0 ENDIF;
tDMinOxyDetSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN afOxySedM *(1.0 - fRefrDetS) * tDMinDetSM ELSE 0.0 ENDIF;
tO2MinDetSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN molO2molC * cCPerDW * tDMinOxyDetSM ELSE 0.0 ENDIF;
tDDenitSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN oNO3SM*oNO3SM /(hNO3Denit*hNO3Denit + oNO3SM*oNO3SM) *(1.0 - afOxySedM) *(1.0 - fRefrDetS) * tDMinDetSM ELSE 0.0 ENDIF;
tNDenitSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN NO3PerC * molNmolC * cCPerDW * tDDenitSM ELSE 0.0 ENDIF;
tNNitrSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN afOxySedM * kNitrS * uFunTmNitr * sNH4SM ELSE 0.0 ENDIF;
tO2NitrSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN O2PerNH4 * molO2molN * tNNitrSM ELSE 0.0 ENDIF;
tDMinHumSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN kDMinHum * uFunTmMinS * afOxySedM * sDHumSM ELSE 0.0 ENDIF;
tPMinHumSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN kDMinHum * uFunTmMinS * afOxySedM * sPHumSM ELSE 0.0 ENDIF;
tNMinHumSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN kDMinHum * uFunTmMinS * afOxySedM * sNHumSM ELSE 0.0 ENDIF;
aDepthDifM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN fDepthDifS * cDepthSM ELSE 0.0 ENDIF;
tPDifPO4M = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN kPDifPO4 * uFunTmDif * cTurbDifNut * bPorCorSM * (oPO4SM - sPO4WM) / aDepthDifM ELSE 0.0 ENDIF;
tNDifNO3M = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN kNDifNO3 * uFunTmDif * cTurbDifNut * bPorCorSM * (oNO3SM - sNO3WM) / aDepthDifM ELSE 0.0 ENDIF;
tNDifNH4M = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN kNDifNH4 * uFunTmDif * cTurbDifNut * bPorCorSM * (oNH4SM - sNH4WM) / aDepthDifM ELSE 0.0 ENDIF;
tO2DifM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN kO2Dif / aDepthDifM * uFunTmDif * cTurbDifO2 * bPorCorSM * sO2WM ELSE 0.0 ENDIF;
tPDifGroundPO4M = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN 0.0 ELSE 0.0 ENDIF;
tNDifGroundNO3M = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN 0.0 ELSE 0.0 ENDIF;
tNDifGroundNH4M = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN 0.0 ELSE 0.0 ENDIF;
aPAdsMaxWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN cRelPAdsD + aCorO2BODM * cRelPAdsFe * fFeDIM + cRelPAdsAl * fAlDIM ELSE 0.0 ENDIF;
aKPAdsWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN(1.0 - fRedMax *(1.0-aCorO2BODM)) * cKPAdsOx ELSE 0.0 ENDIF;
aPIsoAdsWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN aPAdsMaxWM * aKPAdsWM * sPO4WM /(1.0 + aKPAdsWM * sPO4WM) ELSE 0.0 ENDIF;
aPEqIMWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN aPIsoAdsWM * sDIMWM ELSE 0.0 ENDIF;
wPSorpIMWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN kPSorp *(aPEqIMWM - sPAIMWM) ELSE 0.0 ENDIF;
aPAdsMaxSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN cRelPAdsD + afOxySedM * cRelPAdsFe * fFeDIM + cRelPAdsAl * fAlDIM ELSE 0.0 ENDIF;
aKPAdsSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN(1.0 - fRedMax *(1.0-afOxySedM)) * cKPAdsOx ELSE 0.0 ENDIF;
aPIsoAdsSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN aPAdsMaxSM * aKPAdsSM * oPO4SM /(1.0 + aKPAdsSM * oPO4SM) ELSE 0.0 ENDIF;
aPEqIMSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN aPIsoAdsSM * sDIMSM ELSE 0.0 ENDIF;
tPSorpIMSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN kPSorp *(aPEqIMSM - sPAIMSM) ELSE 0.0 ENDIF;
tPChemPO4M = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN MAX(0.0,kPChemPO4 *(oPO4SM - coPO4Max)) ELSE 0.0 ENDIF;
aDayInitVeg = IF (Day LT 1.0 OR sTime LT BeginTime + 1.0) THEN 367 ELSEIF (uTm GE cTmInitVeg AND aDayInitVeg GT 366) THEN Day ELSE aDayInitVeg ENDIF;
bfRootVeg = IF (FALSE EQ InclSeason) THEN fRootVegSum ELSEIF (Day LT aDayInitVeg) THEN fRootVegWin ELSEIF (Day LT aDayInitVeg + cLengAllo) THEN 0.5*(fRootVegWin + fRootVegSum) + 0.5*(fRootVegWin - fRootVegSum) * COS(Pi/cLengAllo * (Day - aDayInitVeg)) ELSEIF (Day LT cDayWinVeg) THEN fRootVegSum ELSEIF (Day LT cDayWinVeg + cLengAllo) THEN 0.5*(fRootVegWin + fRootVegSum) - 0.5*(fRootVegWin - fRootVegSum) * COS(Pi/cLengAllo * (Day - cDayWinVeg)) ELSE fRootVegWin ENDIF;
bfShootVeg = 1.0 - bfRootVeg;
aDRootVeg = bfRootVeg * sDVeg;
aDShootVeg = bfShootVeg * sDVeg;
aDEmergVeg = fEmergVeg * aDShootVeg;
aDFloatVeg = fFloatVeg * aDShootVeg;
bfSubVeg = 1.0 - fFloatVeg - fEmergVeg;
aDSubVeg = bfSubVeg * aDShootVeg;
aExtVeg = IF (FALSE EQ InclBed) THEN 0.0 ELSE cExtSpVeg * aDSubVeg / sDepthW ENDIF;
aDepth1Veg = fDepth1Veg * sDepthW;
aDepth2Veg = fDepth2Veg * sDepthW;
afCovSurfVeg = IF (FALSE EQ InclBed) THEN 0.0 ELSE MIN(1.0, MAX(aDFloatVeg / (cDLayerVeg + NearZero), aDEmergVeg / (fEmergVeg * cDCarrVeg + NearZero) ) ) ENDIF;
afCovEmergVeg = MIN(1.0, PerCent * cCovSpVeg * aDEmergVeg);
aCovVeg = MIN(100.0, cCovSpVeg * aDShootVeg);
aDVeg = sDVeg;
aPVeg = sPVeg;
aNVeg = sNVeg;
aExtCoef = aExtCoefOpen + aExtVeg;
aLPARBot = uLPARSurf * EXP(- aExtCoef * sDepthW);
rPDVeg = sPVeg / (sDVeg+NearZero);
rNDVeg = sNVeg / (sDVeg+NearZero);
tDMigrVeg = kMigrVeg * (cDVegIn - sDVeg);
tPMigrVeg = kMigrVeg * (cPDVeg0* cDVegIn - sPVeg);
tNMigrVeg = kMigrVeg * (cNDVeg0* cDVegIn - sNVeg);
uFunTmProdVeg = POW(cQ10ProdVeg , (0.1 * (uTm - cTmRef)));
uFunTmRespVeg = POW(cQ10RespVeg , (0.1 * (uTm - cTmRef)));
afPUptVegS = IF (FALSE EQ UseEmpUpt) THEN 0.0 ELSEIF (bfRootVeg LE NearZero) THEN 0.0 ELSEIF (fFloatVeg + bfSubVeg LE NearZero) THEN 1.0 ELSE fSedUptVegMax / (1.0 + fSedUptVegCoef * POW(((oPO4S+NearZero) / (sPO4W+NearZero)) , fSedUptVegExp)) ENDIF;
afNUptVegS = IF (FALSE EQ UseEmpUpt) THEN 0.0 ELSEIF (bfRootVeg LE NearZero) THEN 0.0 ELSEIF (fFloatVeg + bfSubVeg LE NearZero) THEN 1.0 ELSE fSedUptVegMax / (1.0 + fSedUptVegCoef * POW(((oNDissS+NearZero) / (oNDissW+NearZero)) , fSedUptVegExp)) ENDIF;
aVPUptMaxCrVeg = IF (FALSE EQ UseEmpUpt) THEN MAX( 0.0, cVPUptMaxVeg * uFunTmProdVeg * (cPDVegMax-rPDVeg) / (cPDVegMax-cPDVegMin) ) ELSE MAX( 0.0, cVPUptMaxVeg * uFunTmProdVeg * (cPDVegMax-rPDVeg) / (cPDVegMax-cPDVegMin) ) ENDIF;
aVPUptVegW = IF (FALSE EQ UseEmpUpt) THEN sPO4W * aVPUptMaxCrVeg / (aVPUptMaxCrVeg / cAffPUptVeg + sPO4W) ELSE 0.0 ENDIF;
aVPUptVegS = IF (FALSE EQ UseEmpUpt) THEN oPO4S * aVPUptMaxCrVeg / (aVPUptMaxCrVeg / cAffPUptVeg + oPO4S) ELSE 0.0 ENDIF;
tPUptVegW = IF (FALSE EQ UseEmpUpt) THEN aVPUptVegW * (aDSubVeg + aDFloatVeg) ELSE (1.0 - afPUptVegS) * aVPUptMaxCrVeg * sPO4W / (aVPUptMaxCrVeg / cAffPUptVeg + sPO4W) * sDVeg ENDIF;
tPUptVegS = IF (FALSE EQ UseEmpUpt) THEN aVPUptVegS * aDRootVeg ELSE afPUptVegS * aVPUptMaxCrVeg * oPO4S / (aVPUptMaxCrVeg / cAffPUptVeg + oPO4S) * sDVeg ENDIF;
tPUptVeg = IF (FALSE EQ UseEmpUpt) THEN tPUptVegW + tPUptVegS ELSE tPUptVegW + tPUptVegS ENDIF;
aVNUptMaxCrVeg = IF (FALSE EQ UseEmpUpt) THEN MAX( 0.0, cVNUptMaxVeg * uFunTmProdVeg * (cNDVegMax - rNDVeg) / (cNDVegMax - cNDVegMin)) ELSE MAX( 0.0, cVNUptMaxVeg * uFunTmProdVeg * (cNDVegMax - rNDVeg) / (cNDVegMax - cNDVegMin)) ENDIF;
ahNUptVeg = IF (FALSE EQ UseEmpUpt) THEN aVNUptMaxCrVeg / cAffNUptVeg ELSE aVNUptMaxCrVeg / cAffNUptVeg ENDIF;
aVNUptVegW = IF (FALSE EQ UseEmpUpt) THEN oNDissW * aVNUptMaxCrVeg / (ahNUptVeg + oNDissW) ELSE 0.0 ENDIF;
afNH4UptVegW = IF (FALSE EQ UseEmpUpt) THEN sNH4W * sNO3W / ((ahNUptVeg + sNH4W) * (ahNUptVeg + sNO3W + NearZero)) + sNH4W * ahNUptVeg / ((sNH4W + sNO3W + NearZero) * (ahNUptVeg + sNO3W + NearZero)) ELSE sNH4W * sNO3W / ((ahNUptVeg + sNH4W) * (ahNUptVeg + sNO3W + NearZero)) + sNH4W * ahNUptVeg / ((sNH4W + sNO3W + NearZero) * (ahNUptVeg + sNO3W + NearZero)) ENDIF;
tNUptVegW = IF (FALSE EQ UseEmpUpt) THEN aVNUptVegW * (aDSubVeg + aDFloatVeg) ELSE (1.0 - afNUptVegS) * aVNUptMaxCrVeg * oNDissW / (aVNUptMaxCrVeg / cAffNUptVeg + oNDissW) * sDVeg ENDIF;
tNUptNH4VegW = IF (FALSE EQ UseEmpUpt) THEN afNH4UptVegW * tNUptVegW ELSE afNH4UptVegW * tNUptVegW ENDIF;
tNUptNO3VegW = IF (FALSE EQ UseEmpUpt) THEN tNUptVegW - tNUptNH4VegW ELSE tNUptVegW - tNUptNH4VegW ENDIF;
aVNUptVegS = IF (FALSE EQ UseEmpUpt) THEN oNDissS * aVNUptMaxCrVeg / (ahNUptVeg + oNDissS) ELSE 0.0 ENDIF;
tNUptVegS = IF (FALSE EQ UseEmpUpt) THEN aVNUptVegS * aDRootVeg ELSE afNUptVegS * aVNUptMaxCrVeg * oNDissS / (aVNUptMaxCrVeg / cAffNUptVeg + oNDissS) * sDVeg ENDIF;
afNH4UptVegS = IF (FALSE EQ UseEmpUpt) THEN oNH4S * oNO3S / ((ahNUptVeg + oNH4S +NearZero) * (ahNUptVeg + oNO3S +NearZero)) + oNH4S * ahNUptVeg / ((oNH4S + oNO3S+NearZero) * (ahNUptVeg + oNO3S+NearZero)) ELSE oNH4S * oNO3S / ((ahNUptVeg + oNH4S +NearZero) * (ahNUptVeg + oNO3S +NearZero)) + oNH4S * ahNUptVeg / ((oNH4S + oNO3S+NearZero) * (ahNUptVeg + oNO3S+NearZero)) ENDIF;
tNUptNH4VegS = IF (FALSE EQ UseEmpUpt) THEN afNH4UptVegS * tNUptVegS ELSE afNH4UptVegS * tNUptVegS ENDIF;
tNUptNO3VegS = IF (FALSE EQ UseEmpUpt) THEN tNUptVegS - tNUptNH4VegS ELSE tNUptVegS - tNUptNH4VegS ENDIF;
tNUptVeg = IF (FALSE EQ UseEmpUpt) THEN tNUptVegW + tNUptVegS ELSE tNUptVegW + tNUptVegS ENDIF;
aLPAR1Veg = uLPARSurf * EXP(- aExtCoefOpen * aDepth1Veg);
aLPAR2Veg = aLPAR1Veg * EXP(- aExtCoef * (aDepth2Veg - aDepth1Veg));
uhLVeg = hLRefVeg * uFunTmProdVeg;
aLLimShootVeg = fEmergVeg + fFloatVeg * (1.0 - afCovEmergVeg) + bfSubVeg * (1.0 - afCovSurfVeg) * 1.0 / (aExtCoef * sDepthW) * LN( (1.0 + aLPAR1Veg / uhLVeg) / (1.0 + aLPAR2Veg / uhLVeg));
aMuTmLVeg = ufDay * bfShootVeg * aLLimShootVeg * uFunTmProdVeg * cMuMaxVeg;
aPLimVeg = MAX(0.0, (1.0 - cPDVegMin / rPDVeg) * cPDVegMax / (cPDVegMax - cPDVegMin) );
aNLimVeg = MAX(0.0, (1.0 - cNDVegMin / rNDVeg) * cNDVegMax / (cNDVegMax - cNDVegMin) );
aNutLimVeg = MIN( aPLimVeg, aNLimVeg);
aMuVeg = aMuTmLVeg * aNutLimVeg;
bkMortVeg = IF (FALSE EQ InclSeason) THEN kMortVegSum ELSEIF (Day LT cDayWinVeg) THEN kMortVegSum ELSEIF (Day LT cDayWinVeg + cLengMort) THEN - LN(fWinVeg) / cLengMort ELSE kMortVegSum ENDIF;
akDIncrVeg = aMuTmLVeg - kDRespVeg * uFunTmRespVeg - bkMortVeg;
tDEnvVeg = MAX(0.0, akDIncrVeg / (cDCarrVeg+NearZero) * sDVeg*sDVeg);
tDEnvProdVeg = aMuVeg / cMuMaxVeg * tDEnvVeg;
tDProdVeg = MAX(0.0, aMuVeg * sDVeg - tDEnvProdVeg);
tDProdSubVeg = bfSubVeg * tDProdVeg;
tDRespVeg = kDRespVeg * uFunTmRespVeg * sDVeg;
tDEnvMortVeg = tDEnvVeg - tDEnvProdVeg;
tDMortVeg = bkMortVeg * sDVeg + tDEnvMortVeg;
tDMortVegW = fDetWMortVeg * (1.0 - bfRootVeg) * tDMortVeg;
tDMortVegS = tDMortVeg - tDMortVegW;
tDGrazVegBird = IF ( (sTime GE cYearStartBirds * DaysPerYear) AND (Day GE cDayStartBirds) AND (Day LE cDayEndBirds) ) THEN cPrefVegBird * sDVeg / (hDVegBird + sDVeg) * cBirdsPerha / m2Perha * cDGrazPerBird ELSE 0.0 ENDIF;
bkManVeg = IF ((Day GE cDayManVeg1 AND Day LT cDayManVeg1 + cLengMan) OR (Day GE cDayManVeg2 AND Day LT cDayManVeg2 + cLengMan)) THEN -LN(1.0 - fManVeg) / cLengMan ELSE 0.0 ENDIF;
tDManVeg = bkManVeg * sDVeg;
tPManVeg = rPDVeg * tDManVeg;
tNManVeg = rNDVeg * tDManVeg;
tDBedVeg = tDMigrVeg + tDProdVeg - tDRespVeg - tDMortVeg - tDGrazVegBird - tDManVeg;
tO2ProdVeg = molO2molC * cCPerDW * tDProdVeg;
tO2RespVegW = molO2molC * cCPerDW * bfSubVeg * tDRespVeg * aCorO2BOD;
tO2RespVegS = molO2molC * cCPerDW * bfRootVeg * tDRespVeg * afOxySed;
tO2ProdVegS = MIN (tO2RespVegS, tO2ProdVeg);
tO2ProdVegW = MIN( tO2ProdVeg - tO2ProdVegS, bfSubVeg * tO2ProdVeg);
tO2UptNO3VegW = O2PerNO3 * molO2molN * bfSubVeg * tNUptNO3VegW;
tO2UptNO3VegS = O2PerNO3 * molO2molN * tNUptNO3VegS;
tPExcrVeg = (rPDVeg *2.0)/ (cPDVegMax + rPDVeg) * rPDVeg * tDRespVeg;
tPExcrVegS = bfRootVeg * tPExcrVeg;
tPExcrVegW = tPExcrVeg - tPExcrVegS;
tPMortVeg = rPDVeg * tDMortVeg;
tPMortVegPO4 = fDissMortVeg * tPMortVeg;
tPMortVegPO4S = bfRootVeg * tPMortVegPO4;
tPMortVegPO4W = tPMortVegPO4 - tPMortVegPO4S;
tPMortVegDet = tPMortVeg - tPMortVegPO4;
tPMortVegDetW = fDetWMortVeg * (1.0 - bfRootVeg) * tPMortVegDet;
tPMortVegDetS = tPMortVegDet - tPMortVegDetW;
tPGrazVegBird = rPDVeg * tDGrazVegBird;
tPBedVeg = tPMigrVeg + tPUptVeg - tPExcrVeg - tPMortVeg - tPGrazVegBird - tPManVeg;
tNExcrVeg = (2.0 * rNDVeg) / (cNDVegMax + rNDVeg) * rNDVeg * tDRespVeg;
tNExcrVegS = bfRootVeg * tNExcrVeg;
tNExcrVegW = tNExcrVeg - tNExcrVegS;
tNMortVeg = rNDVeg * tDMortVeg;
tNMortVegNH4 = fDissMortVeg * tNMortVeg;
tNMortVegNH4S = bfRootVeg * tNMortVegNH4;
tNMortVegNH4W = tNMortVegNH4 - tNMortVegNH4S;
tNMortVegDet = tNMortVeg - tNMortVegNH4;
tNMortVegDetW = fDetWMortVeg * (1.0 - bfRootVeg) * tNMortVegDet;
tNMortVegDetS = tNMortVegDet - tNMortVegDetW;
tNGrazVegBird = rNDVeg * tDGrazVegBird;
tNBedVeg = tNMigrVeg + tNUptVeg - tNExcrVeg - tNMortVeg - tNGrazVegBird - tNManVeg;
tDAssVegBird = fDAssBird * tDGrazVegBird;
tDEgesBird = tDGrazVegBird - tDAssVegBird;
tPAssVegBird = fDAssBird * tPGrazVegBird;
tPEgesBird = tPGrazVegBird - tPAssVegBird;
tPEgesBirdPO4 = fDissEgesBird * tPEgesBird;
tPEgesBirdDet = tPEgesBird - tPEgesBirdPO4;
tNAssVegBird = fDAssBird * tNGrazVegBird;
tNEgesBird = tNGrazVegBird - tNAssVegBird;
tNEgesBirdNH4 = fDissEgesBird * tNEgesBird;
tNEgesBirdDet = tNEgesBird - tNEgesBirdNH4;
wDBedDetW = (tDMortVegW + tDEgesBird) / sDepthW;
tDBedDetS = tDMortVegS;
tDBedTotT = tDMigrVeg + tDProdVeg - tDRespVeg - tDManVeg - tDAssVegBird;
wPBedPO4W = (- tPUptVegW + tPExcrVegW + tPMortVegPO4W + tPEgesBirdPO4) /sDepthW;
wPBedDetW = (tPMortVegDetW + tPEgesBirdDet) / sDepthW;
tPBedPO4S = - tPUptVegS + tPExcrVegS + tPMortVegPO4S;
tPBedDetS = tPMortVegDetS;
tPBedTotT = tPMigrVeg - tPManVeg - tPAssVegBird;
wNBedNH4W = (- tNUptNH4VegW + tNExcrVegW + tNMortVegNH4W + tNEgesBirdNH4) / sDepthW;
wNBedNO3W = - tNUptNO3VegW / sDepthW;
wNBedDetW = (tNMortVegDetW + tNEgesBirdDet) / sDepthW;
tNBedNH4S = - tNUptNH4VegS + tNExcrVegS + tNMortVegNH4S;
tNBedNO3S = - tNUptNO3VegS;
tNBedDetS = tNMortVegDetS;
tNBedTotT = tNMigrVeg - tNManVeg - tNAssVegBird;
tO2BedW = tO2ProdVegW - tO2RespVegW + tO2UptNO3VegW;
tO2BedS = tO2ProdVegS - tO2RespVegS + tO2UptNO3VegS;
UseLoss = IF (InclWeb EQ TRUE) THEN 0.0 ELSE 1.0 ENDIF;
uFunTmLoss = EXP(-0.5/(cSigTmLoss*cSigTmLoss) *((uTm-cTmOptLoss)*(uTm-cTmOptLoss) -(cTmRef-cTmOptLoss)*(cTmRef-cTmOptLoss)));
rPDBlueW = sPBlueW /(sDBlueW+NearZero);
rNDBlueW = sNBlueW /(sDBlueW+NearZero);
rPDBlueS = sPBlueS /(sDBlueS+NearZero);
rNDBlueS = sNBlueS /(sDBlueS+NearZero);
uFunTmBlue = EXP(-0.5/(cSigTmBlue*cSigTmBlue) *((uTm-cTmOptBlue)*(uTm-cTmOptBlue) - (cTmRef-cTmOptBlue)*(cTmRef-cTmOptBlue)));
uFunTmProdBlue = uFunTmBlue;
uFunTmRespBlue = uFunTmBlue;
aVPUptMaxCrBlue = MAX(0.0,cVPUptMaxBlue * uFunTmProdBlue *(cPDBlueMax - rPDBlueW) /(cPDBlueMax - cPDBlueMin));
aVPUptBlue = sPO4W * aVPUptMaxCrBlue /(aVPUptMaxCrBlue / cAffPUptBlue + sPO4W);
wPUptBlue = aVPUptBlue * sDBlueW;
aVNUptMaxCrBlue = MAX(0.0,cVNUptMaxBlue * uFunTmProdBlue * (cNDBlueMax - rNDBlueW) /(cNDBlueMax - cNDBlueMin));
ahNUptBlue = aVNUptMaxCrBlue / cAffNUptBlue;
aVNUptBlue = oNDissW * aVNUptMaxCrBlue /(ahNUptBlue + oNDissW);
wNUptBlue = aVNUptBlue * sDBlueW;
afNH4UptBlue = sNH4W * sNO3W /((ahNUptBlue + sNH4W) *(ahNUptBlue + sNO3W)) + sNH4W * ahNUptBlue /((sNH4W + sNO3W) *(ahNUptBlue + sNO3W));
wNUptNH4Blue = afNH4UptBlue * wNUptBlue;
wNUptNO3Blue = wNUptBlue - wNUptNH4Blue;
uMuMaxTmBlue = cMuMaxBlue * uFunTmProdBlue;
aPLimBlue = MAX(0.0,(1.0 - cPDBlueMin / rPDBlueW) * cPDBlueMax /(cPDBlueMax - cPDBlueMin));
aNLimBlue = MAX(0.0,(1.0 - cNDBlueMin / rNDBlueW) * cNDBlueMax /(cNDBlueMax - cNDBlueMin));
aSiLimBlue = sSiO2W /(hSiAssBlue + sSiO2W);
aLLimBlue = UseSteeleBlue *(EXP(1.0) /(aExtCoef * sDepthW) *(EXP(- aLPARBot /(cLOptRefBlue * uFunTmProdBlue)) - EXP(- uLPARSurf /(cLOptRefBlue * uFunTmProdBlue)))) +(1.0 - UseSteeleBlue) *(1.0 /(aExtCoef * sDepthW) * LN((1.0 + uLPARSurf / (hLRefBlue * uFunTmProdBlue)) / (1.0 + aLPARBot /(hLRefBlue * uFunTmProdBlue))));
aMuTmLBlue = ufDay *(1.0 - afCovSurfVeg) * aLLimBlue * uMuMaxTmBlue;
aNutLimBlue = MIN(aPLimBlue,(MIN(aNLimBlue,aSiLimBlue)));
aMuBlue = aNutLimBlue * aMuTmLBlue;
wDAssBlue = aMuBlue*sDBlueW;
rChDBlue = cChDBlueMax -(cChDBlueMax - cChDBlueMin) * aLLimBlue;
oChlaBlue = mgPerg * rChDBlue * sDBlueW;
aExtChBlue = cExtSpBlue / rChDBlue;
ukDRespTmBlue = kDRespBlue * uFunTmRespBlue;
wDRespBlueW = ukDRespTmBlue * sDBlueW;
ukLossTmBlue = UseLoss * kLossBlue * uFunTmLoss;
wDLossBlue = ukLossTmBlue * sDBlueW;
wDMortBlueW = kMortBlueW * sDBlueW;
uCorVSetBlue = cVSetBlue * aFunTauSetOM * uFunTmSet;
tDSetBlue = uCorVSetBlue * sDBlueW;
tDResusBlue = sDBlueS /(aDPhytS+NearZero) * tDResusPhytTot;
tDRespBlueS = ukDRespTmBlue * sDBlueS;
tDMortBlueS = kMortBlueS * sDBlueS;
ukDDecBlue = ukDRespTmBlue + ukLossTmBlue + kMortBlueW +(uCorVSetBlue * uFunTmSet) / sDepthW;
wPExcrBlueW = (rPDBlueW * 2.0 )/(cPDBlueMax + rPDBlueW) * rPDBlueW * wDRespBlueW;
wPLossBlue = rPDBlueW * wDLossBlue;
wPMortBlueW = kMortBlueW * sPBlueW;
tPSetBlue = rPDBlueW * tDSetBlue;
tPResusBlue = rPDBlueS * tDResusBlue;
tPExcrBlueS = (rPDBlueS *2.0)/(cPDBlueMax + rPDBlueS) * rPDBlueS * tDRespBlueS;
tPMortBlueS = kMortBlueS * sPBlueS;
wNExcrBlueW = (rNDBlueW *2.0)/(cNDBlueMax + rNDBlueW) * rNDBlueW * wDRespBlueW;
wNLossBlue = rNDBlueW * wDLossBlue;
wNMortBlueW = kMortBlueW * sNBlueW;
tNSetBlue = rNDBlueW * tDSetBlue;
tNResusBlue = rNDBlueS * tDResusBlue;
tNExcrBlueS = (2.0 * rNDBlueS) /(cNDBlueMax + rNDBlueS) * rNDBlueS * tDRespBlueS;
tNMortBlueS = kMortBlueS * sNBlueS;
wDPrimBlueW = wDAssBlue - wDRespBlueW - wDLossBlue - wDMortBlueW -(tDSetBlue - tDResusBlue) / sDepthW;
wPPrimBlueW = wPUptBlue - wPExcrBlueW - wPLossBlue - wPMortBlueW -(tPSetBlue - tPResusBlue) / sDepthW;
wNPrimBlueW = wNUptBlue - wNExcrBlueW - wNLossBlue - wNMortBlueW -(tNSetBlue - tNResusBlue) / sDepthW;
tDPrimBlueS = IF (InclPhytS EQ TRUE) THEN tDSetBlue - tDResusBlue - tDMortBlueS - tDRespBlueS ELSE 0.0 ENDIF;
tPPrimBlueS = IF (InclPhytS EQ TRUE) THEN tPSetBlue - tPResusBlue - tPMortBlueS - tPExcrBlueS ELSE 0.0 ENDIF;
tNPrimBlueS = IF (InclPhytS EQ TRUE) THEN tNSetBlue - tNResusBlue - tNMortBlueS - tNExcrBlueS ELSE 0.0 ENDIF;
rPDGrenW = sPGrenW /(sDGrenW+NearZero);
rNDGrenW = sNGrenW /(sDGrenW+NearZero);
rPDGrenS = sPGrenS /(sDGrenS+NearZero);
rNDGrenS = sNGrenS /(sDGrenS+NearZero);
uFunTmGren = EXP(-0.5/(cSigTmGren*cSigTmGren) *((uTm-cTmOptGren)*(uTm-cTmOptGren) - (cTmRef-cTmOptGren)*(cTmRef-cTmOptGren)));
uFunTmProdGren = uFunTmGren;
uFunTmRespGren = uFunTmGren;
aVPUptMaxCrGren = MAX(0.0,cVPUptMaxGren * uFunTmProdGren *(cPDGrenMax - rPDGrenW) /(cPDGrenMax - cPDGrenMin));
aVPUptGren = sPO4W * aVPUptMaxCrGren /(aVPUptMaxCrGren / cAffPUptGren + sPO4W);
wPUptGren = aVPUptGren * sDGrenW;
aVNUptMaxCrGren = MAX(0.0,cVNUptMaxGren * uFunTmProdGren * (cNDGrenMax - rNDGrenW) /(cNDGrenMax - cNDGrenMin));
ahNUptGren = aVNUptMaxCrGren / cAffNUptGren;
aVNUptGren = oNDissW * aVNUptMaxCrGren /(ahNUptGren + oNDissW);
wNUptGren = aVNUptGren * sDGrenW;
afNH4UptGren = sNH4W * sNO3W /((ahNUptGren + sNH4W) *(ahNUptGren + sNO3W)) + sNH4W * ahNUptGren /((sNH4W + sNO3W) *(ahNUptGren + sNO3W));
wNUptNH4Gren = afNH4UptGren * wNUptGren;
wNUptNO3Gren = wNUptGren - wNUptNH4Gren;
uMuMaxTmGren = cMuMaxGren * uFunTmProdGren;
aPLimGren = MAX(0.0,(1.0 - cPDGrenMin / rPDGrenW) * cPDGrenMax /(cPDGrenMax - cPDGrenMin));
aNLimGren = MAX(0.0,(1.0 - cNDGrenMin / rNDGrenW) * cNDGrenMax /(cNDGrenMax - cNDGrenMin));
aSiLimGren = sSiO2W /(hSiAssGren + sSiO2W);
aLLimGren = UseSteeleGren *(EXP(1.0) /(aExtCoef * sDepthW) *(EXP(- aLPARBot /(cLOptRefGren * uFunTmProdGren)) - EXP(- uLPARSurf /(cLOptRefGren * uFunTmProdGren)))) +(1.0 - UseSteeleGren) *(1.0 /(aExtCoef * sDepthW) * LN((1.0 + uLPARSurf / (hLRefGren * uFunTmProdGren)) / (1.0 + aLPARBot /(hLRefGren * uFunTmProdGren))));
aMuTmLGren = ufDay *(1.0 - afCovSurfVeg) * aLLimGren * uMuMaxTmGren;
aNutLimGren = MIN(aPLimGren,(MIN(aNLimGren,aSiLimGren)));
aMuGren = aNutLimGren * aMuTmLGren;
wDAssGren = aMuGren*sDGrenW;
rChDGren = cChDGrenMax -(cChDGrenMax - cChDGrenMin) * aLLimGren;
oChlaGren = mgPerg * rChDGren * sDGrenW;
aExtChGren = cExtSpGren / rChDGren;
ukDRespTmGren = kDRespGren * uFunTmRespGren;
wDRespGrenW = ukDRespTmGren * sDGrenW;
ukLossTmGren = UseLoss * kLossGren * uFunTmLoss;
wDLossGren = ukLossTmGren * sDGrenW;
wDMortGrenW = kMortGrenW * sDGrenW;
uCorVSetGren = cVSetGren * aFunTauSetOM * uFunTmSet;
tDSetGren = uCorVSetGren * sDGrenW;
tDResusGren = sDGrenS /(aDPhytS+NearZero) * tDResusPhytTot;
tDRespGrenS = ukDRespTmGren * sDGrenS;
tDMortGrenS = kMortGrenS * sDGrenS;
ukDDecGren = ukDRespTmGren + ukLossTmGren + kMortGrenW +(uCorVSetGren * uFunTmSet) / sDepthW;
wPExcrGrenW = (2.0 *rPDGrenW) /(cPDGrenMax + rPDGrenW) * rPDGrenW * wDRespGrenW;
wPLossGren = rPDGrenW * wDLossGren;
wPMortGrenW = kMortGrenW * sPGrenW;
tPSetGren = rPDGrenW * tDSetGren;
tPResusGren = rPDGrenS * tDResusGren;
tPExcrGrenS = (2.0 * rPDGrenS) /(cPDGrenMax + rPDGrenS) * rPDGrenS * tDRespGrenS;
tPMortGrenS = kMortGrenS * sPGrenS;
wNExcrGrenW = (2.0 * rNDGrenW) /(cNDGrenMax + rNDGrenW) * rNDGrenW * wDRespGrenW;
wNLossGren = rNDGrenW * wDLossGren;
wNMortGrenW = kMortGrenW * sNGrenW;
tNSetGren = rNDGrenW * tDSetGren;
tNResusGren = rNDGrenS * tDResusGren;
tNExcrGrenS = (2.0 * rNDGrenS) /(cNDGrenMax + rNDGrenS) * rNDGrenS * tDRespGrenS;
tNMortGrenS = kMortGrenS * sNGrenS;
wDPrimGrenW = wDAssGren - wDRespGrenW - wDLossGren - wDMortGrenW -(tDSetGren - tDResusGren) / sDepthW;
wPPrimGrenW = wPUptGren - wPExcrGrenW - wPLossGren - wPMortGrenW -(tPSetGren - tPResusGren) / sDepthW;
wNPrimGrenW = wNUptGren - wNExcrGrenW - wNLossGren - wNMortGrenW -(tNSetGren - tNResusGren) / sDepthW;
tDPrimGrenS = IF (InclPhytS EQ TRUE) THEN tDSetGren - tDResusGren - tDMortGrenS - tDRespGrenS ELSE 0.0 ENDIF;
tPPrimGrenS = IF (InclPhytS EQ TRUE) THEN tPSetGren - tPResusGren - tPMortGrenS - tPExcrGrenS ELSE 0.0 ENDIF;
tNPrimGrenS = IF (InclPhytS EQ TRUE) THEN tNSetGren - tNResusGren - tNMortGrenS - tNExcrGrenS ELSE 0.0 ENDIF;
rPDDiatW = sPDiatW /(sDDiatW+NearZero);
rNDDiatW = sNDiatW /(sDDiatW+NearZero);
rPDDiatS = sPDiatS /(sDDiatS+NearZero);
rNDDiatS = sNDiatS /(sDDiatS+NearZero);
uFunTmDiat = EXP(-0.5/(cSigTmDiat*cSigTmDiat) *((uTm-cTmOptDiat)*(uTm-cTmOptDiat) - (cTmRef-cTmOptDiat)*(cTmRef-cTmOptDiat)));
uFunTmProdDiat = uFunTmDiat;
uFunTmRespDiat = uFunTmDiat;
aVPUptMaxCrDiat = MAX(0.0,cVPUptMaxDiat * uFunTmProdDiat *(cPDDiatMax - rPDDiatW) /(cPDDiatMax - cPDDiatMin));
aVPUptDiat = sPO4W * aVPUptMaxCrDiat /(aVPUptMaxCrDiat / cAffPUptDiat + sPO4W);
wPUptDiat = aVPUptDiat * sDDiatW;
aVNUptMaxCrDiat = MAX(0.0,cVNUptMaxDiat * uFunTmProdDiat * (cNDDiatMax - rNDDiatW) /(cNDDiatMax - cNDDiatMin));
ahNUptDiat = aVNUptMaxCrDiat / cAffNUptDiat;
aVNUptDiat = oNDissW * aVNUptMaxCrDiat /(ahNUptDiat + oNDissW);
wNUptDiat = aVNUptDiat * sDDiatW;
afNH4UptDiat = sNH4W * sNO3W /((ahNUptDiat + sNH4W) *(ahNUptDiat + sNO3W)) + sNH4W * ahNUptDiat /((sNH4W + sNO3W) *(ahNUptDiat + sNO3W));
wNUptNH4Diat = afNH4UptDiat * wNUptDiat;
wNUptNO3Diat = wNUptDiat - wNUptNH4Diat;
uMuMaxTmDiat = cMuMaxDiat * uFunTmProdDiat;
aPLimDiat = MAX(0.0,(1.0 - cPDDiatMin / rPDDiatW) * cPDDiatMax /(cPDDiatMax - cPDDiatMin));
aNLimDiat = MAX(0.0,(1.0 - cNDDiatMin / rNDDiatW) * cNDDiatMax /(cNDDiatMax - cNDDiatMin));
aSiLimDiat = sSiO2W /(hSiAssDiat + sSiO2W);
aLLimDiat = UseSteeleDiat *(EXP(1.0) /(aExtCoef * sDepthW) *(EXP(- aLPARBot /(cLOptRefDiat * uFunTmProdDiat)) - EXP(- uLPARSurf /(cLOptRefDiat * uFunTmProdDiat)))) +(1.0 - UseSteeleDiat) *(1.0 /(aExtCoef * sDepthW) * LN((1.0 + uLPARSurf / (hLRefDiat * uFunTmProdDiat)) / (1.0 + aLPARBot /(hLRefDiat * uFunTmProdDiat))));
aMuTmLDiat = ufDay *(1.0 - afCovSurfVeg) * aLLimDiat * uMuMaxTmDiat;
aNutLimDiat = MIN(aPLimDiat,(MIN(aNLimDiat,aSiLimDiat)));
aMuDiat = aNutLimDiat * aMuTmLDiat;
wDAssDiat = aMuDiat*sDDiatW;
rChDDiat = cChDDiatMax -(cChDDiatMax - cChDDiatMin) * aLLimDiat;
oChlaDiat = mgPerg * rChDDiat * sDDiatW;
aExtChDiat = cExtSpDiat / rChDDiat;
ukDRespTmDiat = kDRespDiat * uFunTmRespDiat;
wDRespDiatW = ukDRespTmDiat * sDDiatW;
ukLossTmDiat = UseLoss * kLossDiat * uFunTmLoss;
wDLossDiat = ukLossTmDiat * sDDiatW;
wDMortDiatW = kMortDiatW * sDDiatW;
uCorVSetDiat = cVSetDiat * aFunTauSetOM * uFunTmSet;
tDSetDiat = uCorVSetDiat * sDDiatW;
tDResusDiat = sDDiatS /(aDPhytS+NearZero) * tDResusPhytTot;
tDRespDiatS = ukDRespTmDiat * sDDiatS;
tDMortDiatS = kMortDiatS * sDDiatS;
ukDDecDiat = ukDRespTmDiat + ukLossTmDiat + kMortDiatW +(uCorVSetDiat * uFunTmSet) / sDepthW;
wPExcrDiatW = (2.0 * rPDDiatW) /(cPDDiatMax + rPDDiatW) * rPDDiatW * wDRespDiatW;
wPLossDiat = rPDDiatW * wDLossDiat;
wPMortDiatW = kMortDiatW * sPDiatW;
tPSetDiat = rPDDiatW * tDSetDiat;
tPResusDiat = rPDDiatS * tDResusDiat;
tPExcrDiatS = (2.0 * rPDDiatS) /(cPDDiatMax + rPDDiatS) * rPDDiatS * tDRespDiatS;
tPMortDiatS = kMortDiatS * sPDiatS;
wNExcrDiatW = (2.0 * rNDDiatW) /(cNDDiatMax + rNDDiatW) * rNDDiatW * wDRespDiatW;
wNLossDiat = rNDDiatW * wDLossDiat;
wNMortDiatW = kMortDiatW * sNDiatW;
tNSetDiat = rNDDiatW * tDSetDiat;
tNResusDiat = rNDDiatS * tDResusDiat;
tNExcrDiatS = (2.0 * rNDDiatS) /(cNDDiatMax + rNDDiatS) * rNDDiatS * tDRespDiatS;
tNMortDiatS = kMortDiatS * sNDiatS;
wDPrimDiatW = wDAssDiat - wDRespDiatW - wDLossDiat - wDMortDiatW -(tDSetDiat - tDResusDiat) / sDepthW;
wPPrimDiatW = wPUptDiat - wPExcrDiatW - wPLossDiat - wPMortDiatW -(tPSetDiat - tPResusDiat) / sDepthW;
wNPrimDiatW = wNUptDiat - wNExcrDiatW - wNLossDiat - wNMortDiatW -(tNSetDiat - tNResusDiat) / sDepthW;
tDPrimDiatS = IF (InclPhytS EQ TRUE) THEN tDSetDiat - tDResusDiat - tDMortDiatS - tDRespDiatS ELSE 0.0 ENDIF;
tPPrimDiatS = IF (InclPhytS EQ TRUE) THEN tPSetDiat - tPResusDiat - tPMortDiatS - tPExcrDiatS ELSE 0.0 ENDIF;
tNPrimDiatS = IF (InclPhytS EQ TRUE) THEN tNSetDiat - tNResusDiat - tNMortDiatS - tNExcrDiatS ELSE 0.0 ENDIF;
oChla = oChlaDiat + oChlaGren + oChlaBlue;
wDAssPhyt = wDAssDiat + wDAssGren + wDAssBlue;
wDRespPhytW = wDRespDiatW + wDRespGrenW + wDRespBlueW;
wDMortPhytW = wDMortDiatW + wDMortGrenW + wDMortBlueW;
tDSetPhyt = tDSetDiat + tDSetGren + tDSetBlue;
wDLossPhyt = wDLossDiat + wDLossGren + wDLossBlue;
wDPrimPhytW = wDPrimDiatW + wDPrimGrenW + wDPrimBlueW;
wPUptPhyt = wPUptDiat + wPUptGren + wPUptBlue;
wPExcrPhytW = wPExcrDiatW + wPExcrGrenW + wPExcrBlueW;
wPMortPhytW = wPMortDiatW + wPMortGrenW + wPMortBlueW;
tPSetPhyt = tPSetDiat + tPSetGren + tPSetBlue;
tPResusPhyt = tPResusDiat + tPResusGren + tPResusBlue;
wPLossPhyt = wPLossDiat + wPLossGren + wPLossBlue;
wPPrimPhytW = wPPrimDiatW + wPPrimGrenW + wPPrimBlueW;
wNUptPhyt = wNUptDiat + wNUptGren + wNUptBlue;
wNUptNH4Phyt = wNUptNH4Diat + wNUptNH4Gren + wNUptNH4Blue;
wNUptNO3Phyt = wNUptNO3Diat + wNUptNO3Gren + wNUptNO3Blue;
wNExcrPhytW = wNExcrDiatW + wNExcrGrenW + wNExcrBlueW;
wNMortPhytW = wNMortDiatW + wNMortGrenW + wNMortBlueW;
tNSetPhyt = tNSetDiat + tNSetGren + tNSetBlue;
tNResusPhyt = tNResusDiat + tNResusGren + tNResusBlue;
wNLossPhyt = wNLossDiat + wNLossGren + wNLossBlue;
wNPrimPhytW = wNPrimDiatW + wNPrimGrenW + wNPrimBlueW;
tDRespPhytS = tDRespDiatS + tDRespGrenS + tDRespBlueS;
tDMortPhytS = tDMortDiatS + tDMortGrenS + tDMortBlueS;
tDPrimPhytS = tDPrimDiatS + tDPrimGrenS + tDPrimBlueS;
tPExcrPhytS = tPExcrDiatS + tPExcrGrenS + tPExcrBlueS;
tPMortPhytS = tPMortDiatS + tPMortGrenS + tPMortBlueS;
tPPrimPhytS = tPPrimDiatS + tPPrimGrenS + tPPrimBlueS;
tNExcrPhytS = tNExcrDiatS + tNExcrGrenS + tNExcrBlueS;
tNMortPhytS = tNMortDiatS + tNMortGrenS + tNMortBlueS;
tNPrimPhytS = tNPrimDiatS + tNPrimGrenS + tNPrimBlueS;
wSiUptDiat = cSiDDiat * wDAssDiat;
wSiExcrDiatW = cSiDDiat * wDRespDiatW;
wSiLossDiat = cSiDDiat * wDLossDiat;
wSiMortDiatW = cSiDDiat * wDMortDiatW;
tSiSetDiat = cSiDDiat * tDSetDiat;
tSiResusDiat = cSiDDiat * tDResusDiat;
wSiPrimDiatW = wSiUptDiat - tSiSetDiat / sDepthW - wSiExcrDiatW - wSiMortDiatW - wSiLossDiat + tSiResusDiat / sDepthW;
rCyDBlue = cCyDBlueMax -(cCyDBlueMax - cCyDBlueMin) * aLLimBlue;
oCyan = rCyDBlue * sDBlueW * mgPerg;
fDDiat = sDDiatW /(sDDiatW + sDGrenW + sDBlueW + NearZero);
wDPrimDetW = wDMortPhytW + wDLossPhyt;
tDPrimDetS = IF (InclPhytS EQ TRUE) THEN tDMortPhytS ELSE tDSetPhyt ENDIF;
tDPrimTotT = (wDAssPhyt - wDRespPhytW) * sDepthW - tDRespPhytS;
wO2ProdPhyt = molO2molC * cCPerDW * wDAssPhyt;
wO2RespPhytW = molO2molC * cCPerDW * wDRespPhytW * aCorO2BOD;
wO2UptNO3Phyt = O2PerNO3 * molO2molN * wNUptNO3Phyt;
wO2PrimW = wO2ProdPhyt - wO2RespPhytW + wO2UptNO3Phyt;
tO2RespPhytS = molO2molC * cCPerDW * tDRespPhytS * afOxySed;
tO2PrimS = tO2RespPhytS;
wPMortPhytPO4W = fDissMortPhyt * wPMortPhytW;
wPMortPhytDetW = wPMortPhytW - wPMortPhytPO4W;
wPLossPhytPO4 = fDissLoss * wPLossPhyt;
wPLossPhytDet = wPLossPhyt - wPLossPhytPO4;
wPPrimPO4W = - wPUptPhyt + wPExcrPhytW + wPLossPhytPO4 + wPMortPhytPO4W;
wPPrimDetW = wPLossPhytDet + wPMortPhytDetW;
tPMortPhytPO4S = fDissMortPhyt * tPMortPhytS;
tPMortPhytDetS = tPMortPhytS - tPMortPhytPO4S;
tPPrimDetS = IF (InclPhytS EQ TRUE) THEN tPMortPhytDetS ELSE tPSetPhyt ENDIF;
tPPrimPO4S = tPExcrPhytS + tPMortPhytPO4S;
tPPrimTotT = 0.0;
wNMortPhytNH4W = fDissMortPhyt * wNMortPhytW;
wNMortPhytDetW = wNMortPhytW - wNMortPhytNH4W;
wNLossPhytNH4 = fDissLoss * wNLossPhyt;
wNLossPhytDet = wNLossPhyt - wNLossPhytNH4;
wNPrimNH4W = - wNUptNH4Phyt + wNExcrPhytW + wNLossPhytNH4 + wNMortPhytNH4W;
wNPrimNO3W = - wNUptNO3Phyt;
wNPrimDetW = wNLossPhytDet + wNMortPhytDetW;
tNMortPhytNH4S = fDissMortPhyt * tNMortPhytS;
tNMortPhytDetS = tNMortPhytS - tNMortPhytNH4S;
tNPrimNH4S = tNExcrPhytS + tNMortPhytNH4S;
tNPrimNO3S = 0.0;
tNPrimDetS = IF (InclPhytS EQ TRUE) THEN tNMortPhytDetS ELSE tNSetPhyt ENDIF;
tNPrimTotT = 0.0;
tSiExcrDiatS = cSiDDiat * tDRespDiatS;
tSiMortDiatS = cSiDDiat * tDMortDiatS;
wSiPrimSiO2W = wSiExcrDiatW - wSiUptDiat + tSiExcrDiatS / sDepthW;
wSiPrimDetW = wSiMortDiatW + wSiLossDiat;
tSiPrimDiatS = IF (InclPhytS EQ TRUE) THEN tSiSetDiat - tSiResusDiat - tSiExcrDiatS - tSiMortDiatS ELSE 0.0 ENDIF;
tSiPrimDetS = IF (InclPhytS EQ TRUE) THEN tSiMortDiatS ELSE tSiSetDiat ENDIF;
tSiPrimTotT = 0.0;
aPACoef = cPACoefMin +(cPACoefMax - cPACoefMin) * hPACoef / (hPACoef + oDOMW);
bSecchiMax = sDepthW + cSecchiPlus;
aSecchi = MIN(bSecchiMax,aPACoef / aExtCoefOpen);
aTransparency = aSecchi / sDepthW;
aDepthEuph = cEuph * aSecchi;
aRelDepthEuph = aDepthEuph / sDepthW;
aChlaH = oChla * sDepthW;
aCovPhytW = cCovSpPhyt *(oDPhytW * sDepthW);
rExtChPhyt = aExtPhyt /(oChla / mgPerg + NearZero);
uFunTmZoo = EXP(-0.5/(cSigTmZoo*cSigTmZoo) *((uTm-cTmOptZoo)*(uTm-cTmOptZoo) -(cTmRef-cTmOptZoo)*(cTmRef-cTmOptZoo)));
rPDZoo = sPZoo /(sDZoo+NearZero);
rNDZoo = sNZoo/(sDZoo+NearZero);
oDFoodZoo = cPrefDiat * sDDiatW + cPrefGren * sDGrenW + cPrefBlue * sDBlueW + cPrefDet * sDDetW;
aFilt = cFiltMax * uFunTmZoo * hFilt /(hFilt + oDOMW);
ukDAssTmZoo = fDAssZoo * cFiltMax * uFunTmZoo * hFilt;
aDSatZoo = oDFoodZoo /(hFilt + oDOMW);
ukDRespTmZoo = kDRespZoo * uFunTmZoo;
ukDIncrZoo = ukDAssTmZoo - ukDRespTmZoo - kMortZoo;
wDEnvZoo = MAX(0.0,ukDIncrZoo / cDCarrZoo * sDZoo*sDZoo);
wDAssZoo = aDSatZoo *(ukDAssTmZoo * sDZoo - wDEnvZoo);
wDConsZoo = wDAssZoo / fDAssZoo;
wDConsDetZoo = cPrefDet*sDDetW / oDFoodZoo * wDConsZoo;
wDConsDiatZoo = cPrefDiat*sDDiatW / oDFoodZoo * wDConsZoo;
wDConsGrenZoo = cPrefGren*sDGrenW / oDFoodZoo * wDConsZoo;
wDConsBlueZoo = cPrefBlue*sDBlueW / oDFoodZoo * wDConsZoo;
wDConsPhytZoo = wDConsDiatZoo + wDConsGrenZoo + wDConsBlueZoo;
wDEgesZoo = wDConsZoo - wDAssZoo;
aCorDRespZoo = MAX(cPDZooRef / rPDZoo,cNDZooRef / rNDZoo);
wDRespZoo = aCorDRespZoo * ukDRespTmZoo * sDZoo;
wDMortZoo = kMortZoo * sDZoo +(1.0 - aDSatZoo) * wDEnvZoo;
oPFoodZoo = cPrefDiat*sPDiatW + cPrefGren*sPGrenW + cPrefBlue*sPBlueW + cPrefDet * sPDetW;
rPDFoodZoo = oPFoodZoo /(oDFoodZoo+NearZero);
wPConsDiatZoo = rPDDiatW * wDConsDiatZoo;
wPConsGrenZoo = rPDGrenW * wDConsGrenZoo;
wPConsBlueZoo = rPDBlueW * wDConsBlueZoo;
wPConsPhytZoo = wPConsDiatZoo + wPConsGrenZoo + wPConsBlueZoo;
wPConsDetZoo = rPDDetW * wDConsDetZoo;
wPConsZoo = wPConsPhytZoo + wPConsDetZoo;
afPAssZoo = MIN(1.0,cPDZooRef / rPDFoodZoo * fDAssZoo);
wPAssZoo = afPAssZoo * wPConsZoo;
wPEgesZoo = wPConsZoo - wPAssZoo;
wPEgesZooPO4 = fDissEgesZoo*wPEgesZoo;
wPEgesZooDet = wPEgesZoo - wPEgesZooPO4;
akPExcrZoo = rPDZoo / cPDZooRef * kDRespZoo * uFunTmZoo;
wPExcrZoo = akPExcrZoo*sPZoo;
wPMortZoo = rPDZoo * wDMortZoo;
wPMortZooPO4 = fDissMortZoo * wPMortZoo;
wPMortZooDet = wPMortZoo - wPMortZooPO4;
oNFoodZoo = cPrefDiat*sNDiatW + cPrefGren*sNGrenW + cPrefBlue*sNBlueW + cPrefDet*sNDetW;
rNDFoodZoo = oNFoodZoo /(oDFoodZoo+NearZero);
wNConsDiatZoo = rNDDiatW*wDConsDiatZoo;
wNConsGrenZoo = rNDGrenW*wDConsGrenZoo;
wNConsBlueZoo = rNDBlueW*wDConsBlueZoo;
wNConsPhytZoo = wNConsDiatZoo + wNConsGrenZoo + wNConsBlueZoo;
wNConsDetZoo = rNDDetW*wDConsDetZoo;
wNConsZoo = wNConsPhytZoo + wNConsDetZoo;
afNAssZoo = MIN(1.0,cNDZooRef / rNDFoodZoo * fDAssZoo);
wNAssZoo = afNAssZoo*wNConsZoo;
wNEgesZoo = wNConsZoo - wNAssZoo;
wNEgesZooNH4 = fDissEgesZoo*wNEgesZoo;
wNEgesZooDet = wNEgesZoo - wNEgesZooNH4;
kNExcrZoo = rNDZoo / cNDZooRef * kDRespZoo * uFunTmZoo;
wNExcrZoo = kNExcrZoo*sNZoo;
wNMortZoo = rNDZoo*wDMortZoo;
wNMortZooNH4 = fDissMortZoo*wNMortZoo;
wNMortZooDet = wNMortZoo - wNMortZooNH4;
wSiConsDiatZoo = cSiDDiat * wDConsDiatZoo;
uFunTmBent = EXP(-0.5/(cSigTmBent*cSigTmBent) *((uTm-cTmOptBent)*(uTm-cTmOptBent) - (cTmRef-cTmOptBent)*(cTmRef-cTmOptBent)));
aDFoodBent = sDDetS + aDPhytS;
rPDBent = sPBent /(sDBent+NearZero);
rNDBent = sNBent /(sDBent+NearZero);
tDMigrBent = kMigrBent *(cDBentIn - sDBent);
aDSatBent = aDFoodBent /(hDFoodBent + aDFoodBent);
ukDIncrBent = (kDAssBent - kDRespBent) * uFunTmBent - kMortBent;
tDEnvBent = MAX(0.0,ukDIncrBent / cDCarrBent * sDBent*sDBent);
tDAssBent = aDSatBent *(kDAssBent * uFunTmBent * sDBent - tDEnvBent);
aDAssBentSp = tDAssBent / sDBent;
tDConsBent = tDAssBent / fDAssBent;
tDConsDetBent = sDDetS / aDFoodBent * tDConsBent;
tDConsDiatBent = sDDiatS / aDFoodBent * tDConsBent;
tDConsGrenBent = sDGrenS / aDFoodBent * tDConsBent;
tDConsBlueBent = sDBlueS / aDFoodBent * tDConsBent;
tDConsPhytBent = tDConsDiatBent + tDConsGrenBent + tDConsBlueBent;
tDEgesBent = tDConsBent - tDAssBent;
tDRespBent = (cPDBentRef / rPDBent) * kDRespBent * uFunTmBent * sDBent;
tDMortBent = kMortBent*sDBent +(1.0 - aDSatBent) * tDEnvBent;
aPFoodBent = sPDetS + aPPhytS;
rPDFoodBent = aPFoodBent /(aDFoodBent+NearZero);
tPConsDetBent = rPDDetS * tDConsDetBent;
tPConsDiatBent = rPDDiatS * tDConsDiatBent;
tPConsGrenBent = rPDGrenS * tDConsGrenBent;
tPConsBlueBent = rPDBlueS * tDConsBlueBent;
tPConsPhytBent = tPConsDiatBent + tPConsGrenBent + tPConsBlueBent;
tPConsBent = tPConsDetBent + tPConsPhytBent;
afPAssBent = MIN(1.0,cPDBentRef / rPDFoodBent * fDAssBent);
tPAssBent = afPAssBent * tPConsBent;
tPEgesBent = tPConsBent - tPAssBent;
tPEgesBentPO4 = fDissEgesBent * tPEgesBent;
tPEgesBentDet = (1.0 - fDissEgesBent) * tPEgesBent;
tPExcrBent = (rPDBent / cPDBentRef) * kDRespBent * uFunTmBent * sPBent;
tPMortBent = rPDBent * tDMortBent;
tPMortBentPO4 = fDissMortBent * tPMortBent;
tPMortBentDet = (1.0-fDissMortBent)*tPMortBent;
tPMigrBent = kMigrBent *(cPDBentRef*cDBentIn - sPBent);
aNFoodBent = sNDetS + aNPhytS;
rNDFoodBent = aNFoodBent /(aDFoodBent+NearZero);
tNMigrBent = kMigrBent *(cNDBentRef*cDBentIn - sNBent);
tNConsDetBent = rNDDetS * tDConsDetBent;
tNConsDiatBent = rNDDiatS * tDConsDiatBent;
tNConsGrenBent = rNDGrenS * tDConsGrenBent;
tNConsBlueBent = rNDBlueS * tDConsBlueBent;
tNConsPhytBent = tNConsDiatBent + tNConsGrenBent + tNConsBlueBent;
tNConsBent = tNConsDetBent + tNConsPhytBent;
afNAssBent = MIN(1.0,cNDBentRef / rNDFoodBent * fDAssBent);
tNAssBent = afNAssBent * tNConsBent;
tNEgesBent = tNConsBent - tNAssBent;
tNEgesBentNH4 = fDissEgesBent * tNEgesBent;
tNEgesBentDet = (1.0 - fDissEgesBent) * tNEgesBent;
tNExcrBent = (rNDBent / cNDBentRef) * kDRespBent * uFunTmBent * sNBent;
tNMortBent = rNDBent * tDMortBent;
tNMortBentNH4 = fDissMortBent*tNMortBent;
tNMortBentDet = (1.0-fDissMortBent)*tNMortBent;
tSiConsDiatBent = cSiDDiat * tDConsDiatBent;
aDFish = sDFiJv + sDFiAd;
aPFish = sPFiJv + sPFiAd;
aNFish = sNFiJv + sNFiAd;
rPDFiJv = sPFiJv /(sDFiJv+NearZero);
rPDFiAd = sPFiAd /(sDFiAd+NearZero);
rNDFiJv = sNFiJv /(sDFiJv+NearZero);
rNDFiAd = sNFiAd /(sDFiAd+NearZero);
tDReprFish = IF (FALSE EQ InclSeason) THEN ((1/DaysPerYear)*fReprFish) * sDFiAd ELSEIF (Day GE cDayReprFish AND Day LT cDayReprFish + 1.0) THEN fReprFish * sDFiAd ELSE 0.0 ENDIF;
tDAgeFish = IF (FALSE EQ InclSeason) THEN ((1/DaysPerYear)*fAgeFish) * sDFiJv ELSEIF (Day GE 364.0) THEN fAgeFish * sDFiJv ELSE 0.0 ENDIF;
aFunVegFish = MAX(0.0,1.0 - cRelVegFish * aCovVeg);
aDSatFiJv = (sDZoo * sDepthW) *(sDZoo * sDepthW) /(hDZooFiJv * hDZooFiJv + (sDZoo * sDepthW) *(sDZoo * sDepthW));
ukDIncrFiJv = (kDAssFiJv - kDRespFiJv) * uFunTmFish - kMortFiJv;
tDEnvFiJv = MAX(0.0,ukDIncrFiJv /(cDCarrFish - sDFiAd) * sDFiJv*sDFiJv);
tDAssFiJv = aDSatFiJv *(kDAssFiJv * uFunTmFish * sDFiJv - tDEnvFiJv);
tDConsFiJv = tDAssFiJv / fDAssFiJv;
tDEgesFiJv = tDConsFiJv - tDAssFiJv;
tDRespFiJv = (cPDFishRef / rPDFiJv) * kDRespFiJv * uFunTmFish * sDFiJv;
tDMortFiJv = kMortFiJv * sDFiJv +(1.0 - aDSatFiJv) * tDEnvFiJv;
tDMigrFiJv = kMigrFish *(cDFiJvIn - sDFiJv);
aDSatFiAd = (aFunVegFish * sDBent) *(aFunVegFish * sDBent) /(hDBentFiAd * hDBentFiAd + (aFunVegFish * sDBent) *(aFunVegFish * sDBent));
ukDIncrFiAd = (kDAssFiAd - kDRespFiAd) * uFunTmFish - kMortFiAd;
tDEnvFiAd = MAX(0.0,ukDIncrFiAd /(cDCarrFish - sDFiJv) * sDFiAd*sDFiAd);
tDAssFiAd = aDSatFiAd *(kDAssFiAd * uFunTmFish * sDFiAd - tDEnvFiAd);
tDConsFiAd = tDAssFiAd / fDAssFiAd;
tDEgesFiAd = tDConsFiAd - tDAssFiAd;
tDRespFiAd = (cPDFishRef / rPDFiAd) * kDRespFiAd * uFunTmFish * sDFiAd;
tDMortFiAd = kMortFiAd * sDFiAd +(1.0 - aDSatFiAd) * tDEnvFiAd;
ukHarvFish = IF (COS(2.0 * Pi * sTime / DaysPerYear) GT 0.1) THEN kHarvFishWin ELSE kHarvFishSum ENDIF;
tDHarvFish = ukHarvFish * sDFiAd;
tDMigrFiAd = kMigrFish *(cDFiAdIn - sDFiAd);
tDMortFish = tDMortFiJv + tDMortFiAd;
tDMortFishBot = fDBone * tDMortFish;
tDMortFishDet = tDMortFish - tDMortFishBot;
tPReprFish = rPDFiAd * tDReprFish;
tPAgeFish = rPDFiJv * tDAgeFish;
tPMigrFiJv = kMigrFish *(cPDFishRef * cDFiJvIn - sPFiJv);
tPConsFiJv = rPDZoo * tDConsFiJv;
afPAssFiJv = MIN(1.0,cPDFishRef / rPDZoo * fDAssFiJv);
tPAssFiJv = afPAssFiJv * tPConsFiJv;
tPEgesFiJv = tPConsFiJv - tPAssFiJv;
tPExcrFiJv = (rPDFiJv / cPDFishRef) * kDRespFiJv * uFunTmFish * sPFiJv;
tPMortFiJv = rPDFiJv * tDMortFiJv;
tPMigrFiAd = kMigrFish *(cPDFishRef * cDFiAdIn - sPFiAd);
tPConsFiAd = rPDBent * tDConsFiAd;
afPAssFiAd = MIN(1.0,cPDFishRef / rPDBent * fDAssFiAd);
tPAssFiAd = afPAssFiAd * tPConsFiAd;
tPEgesFiAd = tPConsFiAd - tPAssFiAd;
tPExcrFiAd = (rPDFiAd / cPDFishRef) * kDRespFiAd * uFunTmFish * sPFiAd;
tPMortFiAd = rPDFiAd * tDMortFiAd;
tPHarvFish = rPDFiAd * tDHarvFish;
tPMortFish = tPMortFiJv + tPMortFiAd;
tPMortFishBot = fPBone * tPMortFish;
tPMortFishPO4 = fDissMortFish *(tPMortFish - tPMortFishBot);
tPMortFishDet = tPMortFish - tPMortFishBot - tPMortFishPO4;
tPEgesFish = tPEgesFiJv + tPEgesFiAd;
tPEgesFishPO4 = fDissEgesFish * tPEgesFish;
tPEgesFishDet = tPEgesFish - tPEgesFishPO4;
tNReprFish = rNDFiAd * tDReprFish;
tNAgeFish = rNDFiJv * tDAgeFish;
tNMigrFiJv = kMigrFish *(cNDFishRef * cDFiJvIn - sNFiJv);
tNConsFiJv = rNDZoo * tDConsFiJv;
afNAssFiJv = MIN(1.0,cNDFishRef / rNDZoo * fDAssFiJv);
tNAssFiJv = afNAssFiJv * tNConsFiJv;
tNEgesFiJv = tNConsFiJv - tNAssFiJv;
tNExcrFiJv = (rNDFiJv / cNDFishRef) * kDRespFiJv * uFunTmFish * sNFiJv;
tNMortFiJv = rNDFiJv * tDMortFiJv;
tNMigrFiAd = kMigrFish *(cNDFishRef * cDFiAdIn - sNFiAd);
tNConsFiAd = rNDBent * tDConsFiAd;
afNAssFiAd = MIN(1.0,cNDFishRef / rNDBent * fDAssFiAd);
tNAssFiAd = afNAssFiAd * tNConsFiAd;
tNEgesFiAd = tNConsFiAd - tNAssFiAd;
tNExcrFiAd = (rNDFiAd / cNDFishRef) * kDRespFiAd * uFunTmFish * sNFiAd;
tNMortFiAd = rNDFiAd * tDMortFiAd;
tNHarvFish = rNDFiAd * tDHarvFish;
tNMortFish = tNMortFiJv + tNMortFiAd;
tNMortFishBot = fDBone * tNMortFish;
tNMortFishNH4 = fDissMortFish *(tNMortFish - tNMortFishBot);
tNMortFishDet = tNMortFish - tNMortFishBot - tNMortFishNH4;
tNEgesFish = tNEgesFiJv + tNEgesFiAd;
tNEgesFishNH4 = fDissEgesFish * tNEgesFish;
tNEgesFishDet = tNEgesFish - tNEgesFishNH4;
uFunTmPisc = EXP(-0.5 /(cSigTmPisc*cSigTmPisc) *((uTm - cTmOptPisc)*(uTm - cTmOptPisc) - (cTmRef - cTmOptPisc)*(cTmRef - cTmOptPisc)));
tDMigrPisc = kMigrPisc *(cDPiscIn - sDPisc);
aDCarrPisc = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN MAX(cDCarrPiscMin,MIN(cDCarrPiscMax,cDCarrPiscBare)) ELSEIF (sDShootPhra LT cDPhraMinPisc) THEN cDCarrPiscMin ELSEIF (aCovVeg LT cCovVegMin) THEN MAX(cDCarrPiscMin,MIN(cDCarrPiscMax,fMarsh *(1.0/PerCent) * cRelPhraPisc)) ELSE MAX(cDCarrPiscMin,MIN(cDCarrPiscMax,fMarsh *(1.0/PerCent) *(cRelPhraPisc + cRelVegPisc))) ENDIF;
aFunVegPisc = aDSubVeg /(hDVegPisc + aDSubVeg + NearZero);
aDSatPisc = aDFish*aDFish /(hDFishPisc*hDFishPisc + aDFish*aDFish);
akDIncrPisc = (kDAssPisc * aFunVegPisc - kDRespPisc) * uFunTmPisc - kMortPisc;
tDEnvPisc = MAX(0.0,akDIncrPisc / aDCarrPisc * sDPisc*sDPisc);
tDAssPisc = aDSatPisc *(kDAssPisc * aFunVegPisc * uFunTmPisc * sDPisc - tDEnvPisc);
tDConsPisc = tDAssPisc / fDAssPisc;
tDEgesPisc = tDConsPisc - tDAssPisc;
tDConsFiJvPisc = sDFiJv / aDFish * tDConsPisc;
tDConsFiAdPisc = tDConsPisc - tDConsFiJvPisc;
tDRespPisc = kDRespPisc * uFunTmPisc * sDPisc;
tDMortPisc = kMortPisc * sDPisc +(1.0 - aDSatPisc) * tDEnvPisc;
tDMortPiscBot = fDBone * tDMortPisc;
tDMortPiscDet = tDMortPisc - tDMortPiscBot;
ukHarvPisc = IF (COS(2.0*Pi * sTime / DaysPerYear) GT 0.1) THEN kHarvPiscWin ELSE kHarvPiscSum ENDIF;
tDHarvPisc = ukHarvPisc * sDPisc;
aPPisc = cPDPisc * sDPisc;
tPConsFiJvPisc = rPDFiJv * tDConsFiJvPisc;
tPConsFiAdPisc = rPDFiAd * tDConsFiAdPisc;
tPConsPisc = tPConsFiJvPisc + tPConsFiAdPisc;
rPDFoodPisc = tPConsPisc / tDConsPisc;
afPAssPisc = MIN(1.0,cPDPisc / rPDFoodPisc * fDAssPisc);
tPAssPisc = afPAssPisc * tPConsPisc;
tPEgesPisc = tPConsPisc - tPAssPisc;
tPEgesPiscPO4 = fDissEgesPisc * tPEgesPisc;
tPEgesPiscDet = tPEgesPisc - tPEgesPiscPO4;
tPExcrPisc = cPDPisc * tDRespPisc;
tPMortPisc = cPDPisc * tDMortPisc;
tPMortPiscBot = fPBone * tPMortPisc;
tPMortPiscPO4 = fDissMortPisc *(tPMortPisc - tPMortPiscBot);
tPMortPiscDet = tPMortPisc - tPMortPiscBot - tPMortPiscPO4;
tPMigrPisc = kMigrPisc *(cPDPisc * cDPiscIn - aPPisc);
tPHarvPisc = cPDPisc * tDHarvPisc;
aNPisc = cNDPisc * sDPisc;
tNConsFiJvPisc = rNDFiJv * tDConsFiJvPisc;
tNConsFiAdPisc = rNDFiAd * tDConsFiAdPisc;
tNConsPisc = tNConsFiJvPisc + tNConsFiAdPisc;
rNDFoodPisc = tNConsPisc / tDConsPisc;
afNAssPisc = MIN(1.0,cNDPisc / rNDFoodPisc * fDAssPisc);
tNAssPisc = afNAssPisc * tNConsPisc;
tNEgesPisc = tNConsPisc - tNAssPisc;
tNEgesPiscNH4 = fDissEgesPisc * tNEgesPisc;
tNEgesPiscDet = tNEgesPisc - tNEgesPiscNH4;
tNExcrPisc = cNDPisc * tDRespPisc;
tNMortPisc = cNDPisc * tDMortPisc;
tNMortPiscBot = fDBone * tNMortPisc;
tNMortPiscNH4 = fDissMortPisc *(tNMortPisc - tNMortPiscBot);
tNMortPiscDet = tNMortPisc - tNMortPiscBot - tNMortPiscNH4;
tNMigrPisc = kMigrPisc *(cNDPisc * cDPiscIn - aNPisc);
tNHarvPisc = cNDPisc * tDHarvPisc;
wDWebZoo = wDAssZoo - wDRespZoo - wDMortZoo - tDConsFiJv / sDepthW;
wPWebZoo = wPAssZoo - wPExcrZoo - wPMortZoo - tPConsFiJv / sDepthW;
wNWebZoo = wNAssZoo - wNExcrZoo - wNMortZoo - tNConsFiJv / sDepthW;
tDWebBent = tDMigrBent + tDAssBent - tDConsFiAd - tDRespBent - tDMortBent;
tPWebBent = tPMigrBent + tPAssBent - tPConsFiAd - tPExcrBent - tPMortBent;
tNWebBent = tNMigrBent + tNAssBent - tNConsFiAd - tNExcrBent - tNMortBent;
tDWebFiJv = tDMigrFiJv + tDReprFish - tDAgeFish + tDAssFiJv - tDRespFiJv - tDMortFiJv - tDConsFiJvPisc;
tPWebFiJv = tPMigrFiJv + tPReprFish - tPAgeFish + tPAssFiJv - tPExcrFiJv - tPMortFiJv - tPConsFiJvPisc;
tNWebFiJv = tNMigrFiJv + tNReprFish - tNAgeFish + tNAssFiJv - tNExcrFiJv - tNMortFiJv - tNConsFiJvPisc;
tDWebFiAd = tDMigrFiAd + tDAssFiAd - tDRespFiAd - tDMortFiAd - tDReprFish + tDAgeFish - tDConsFiAdPisc - tDHarvFish;
tPWebFiAd = tPMigrFiAd + tPAssFiAd - tPExcrFiAd - tPMortFiAd - tPReprFish + tPAgeFish - tPConsFiAdPisc - tPHarvFish;
tNWebFiAd = tNMigrFiAd + tNAssFiAd - tNExcrFiAd - tNMortFiAd - tNReprFish + tNAgeFish - tNConsFiAdPisc - tNHarvFish;
tDWebPisc = tDMigrPisc + tDAssPisc - tDRespPisc - tDMortPisc - tDHarvPisc;
wDWebDetW = IF (FALSE EQ InclWeb) THEN 0.0 ELSE - wDConsDetZoo + wDEgesZoo + wDMortZoo +(tDEgesFiJv + tDEgesFiAd + tDMortFishDet + tDEgesPisc + tDMortPiscDet) / sDepthW ENDIF;
wDWebDiatW = IF (FALSE EQ InclWeb) THEN 0.0 ELSE - wDConsDiatZoo ENDIF;
wDWebGrenW = IF (FALSE EQ InclWeb) THEN 0.0 ELSE - wDConsGrenZoo ENDIF;
wDWebBlueW = IF (FALSE EQ InclWeb) THEN 0.0 ELSE - wDConsBlueZoo ENDIF;
tDWebDetS = IF (FALSE EQ InclWeb) THEN 0.0 ELSE - tDConsDetBent + tDEgesBent + tDMortBent ENDIF;
tDWebDiatS = IF (FALSE EQ InclWeb) THEN 0.0 ELSE - tDConsDiatBent ENDIF;
tDWebGrenS = IF (FALSE EQ InclWeb) THEN 0.0 ELSE - tDConsGrenBent ENDIF;
tDWebBlueS = IF (FALSE EQ InclWeb) THEN 0.0 ELSE - tDConsBlueBent ENDIF;
tDWebPhytS = tDWebDiatS + tDWebGrenS + tDWebBlueS;
tDWebTotT = IF (FALSE EQ InclWeb) THEN 0.0 ELSE - wDRespZoo * sDepthW + tDMigrFiJv + tDMigrFiAd + tDMigrPisc + tDMigrBent - tDRespFiJv - tDRespFiAd - tDRespPisc - tDRespBent - tDMortFishBot - tDMortPiscBot - tDHarvFish - tDHarvPisc ENDIF;
wPWebPO4W = IF (FALSE EQ InclWeb) THEN 0.0 ELSE wPExcrZoo + wPEgesZooPO4 + wPMortZooPO4 +(tPExcrFiJv + tPExcrFiAd + tPEgesFishPO4 + tPMortFishPO4 + tPExcrPisc + tPEgesPiscPO4 + tPMortPiscPO4) / sDepthW ENDIF;
wPWebDetW = IF (FALSE EQ InclWeb) THEN 0.0 ELSE - wPConsDetZoo + wPEgesZooDet + wPMortZooDet +(tPEgesFishDet + tPMortFishDet + tPEgesPiscDet + tPMortPiscDet) / sDepthW ENDIF;
wPWebDiatW = IF (FALSE EQ InclWeb) THEN 0.0 ELSE - wPConsDiatZoo ENDIF;
wPWebGrenW = IF (FALSE EQ InclWeb) THEN 0.0 ELSE - wPConsGrenZoo ENDIF;
wPWebBlueW = IF (FALSE EQ InclWeb) THEN 0.0 ELSE - wPConsBlueZoo ENDIF;
tPWebPO4S = IF (FALSE EQ InclWeb) THEN 0.0 ELSE tPExcrBent + tPEgesBentPO4 + tPMortBentPO4 ENDIF;
tPWebDetS = IF (FALSE EQ InclWeb) THEN 0.0 ELSE - tPConsDetBent + tPEgesBentDet + tPMortBentDet ENDIF;
tPWebDiatS = IF (FALSE EQ InclWeb) THEN 0.0 ELSE - tPConsDiatBent ENDIF;
tPWebGrenS = IF (FALSE EQ InclWeb) THEN 0.0 ELSE - tPConsGrenBent ENDIF;
tPWebBlueS = IF (FALSE EQ InclWeb) THEN 0.0 ELSE - tPConsBlueBent ENDIF;
tPWebPhytS = tPWebDiatS + tPWebGrenS + tPWebBlueS;
tPWebTotT = IF (FALSE EQ InclWeb) THEN 0.0 ELSE tPMigrFiJv + tPMigrFiAd + tPMigrPisc + tPMigrBent - tPMortFishBot - tPMortPiscBot - tPHarvFish - tPHarvPisc ENDIF;
wNWebNH4W = IF (FALSE EQ InclWeb) THEN 0.0 ELSE wNExcrZoo + wNEgesZooNH4 + wNMortZooNH4 +(tNExcrFiJv + tNExcrFiAd + tNEgesFishNH4 + tNMortFishNH4 + tNExcrPisc + tNEgesPiscNH4 + tNMortPiscNH4) / sDepthW ENDIF;
wNWebNO3W = IF (FALSE EQ InclWeb) THEN 0.0 ELSE 0.0 ENDIF;
wNWebDetW = IF (FALSE EQ InclWeb) THEN 0.0 ELSE - wNConsDetZoo + wNEgesZooDet + wNMortZooDet +(tNEgesFishDet + tNMortFishDet + tNEgesPiscDet + tNMortPiscDet) / sDepthW ENDIF;
wNWebDiatW = IF (FALSE EQ InclWeb) THEN 0.0 ELSE - wNConsDiatZoo ENDIF;
wNWebGrenW = IF (FALSE EQ InclWeb) THEN 0.0 ELSE - wNConsGrenZoo ENDIF;
wNWebBlueW = IF (FALSE EQ InclWeb) THEN 0.0 ELSE - wNConsBlueZoo ENDIF;
tNWebNH4S = IF (FALSE EQ InclWeb) THEN 0.0 ELSE tNExcrBent + tNEgesBentNH4 + tNMortBentNH4 ENDIF;
tNWebNO3S = IF (FALSE EQ InclWeb) THEN 0.0 ELSE 0.0 ENDIF;
tNWebDetS = IF (FALSE EQ InclWeb) THEN 0.0 ELSE - tNConsDetBent + tNEgesBentDet + tNMortBentDet ENDIF;
tNWebDiatS = IF (FALSE EQ InclWeb) THEN 0.0 ELSE - tNConsDiatBent ENDIF;
tNWebGrenS = IF (FALSE EQ InclWeb) THEN 0.0 ELSE - tNConsGrenBent ENDIF;
tNWebBlueS = IF (FALSE EQ InclWeb) THEN 0.0 ELSE - tNConsBlueBent ENDIF;
tNWebPhytS = tNWebDiatS + tNWebGrenS + tNWebBlueS;
tNWebTotT = IF (FALSE EQ InclWeb) THEN 0.0 ELSE tNMigrFiJv + tNMigrFiAd + tNMigrPisc + tNMigrBent - tNMortFishBot - tNMortPiscBot - tNHarvFish - tNHarvPisc ENDIF;
wSiWebSiO2W = 0.0;
wSiWebDetW = IF (FALSE EQ InclWeb) THEN 0.0 ELSE wSiConsDiatZoo ENDIF;
tSiWebDetS = IF (FALSE EQ InclWeb) THEN 0.0 ELSE tSiConsDiatBent ENDIF;
tSiWebTotT = IF (FALSE EQ InclWeb) THEN 0.0 ELSE 0.0 ENDIF;
aPrefAve = (cPrefDiat * sDDiatW + cPrefGren * sDGrenW + cPrefBlue * sDBlueW + cPrefDet * sDDetW) / oDOMW;
wDConsZoo2 = aFilt * aPrefAve * oDOMW * sDZoo;
aDConsZooSp = wDConsZoo / sDZoo;
aDAssZooSp = wDAssZoo / sDZoo;
aDGrazSp = wDConsZoo / oDOMW;
aPConsZooSp = wPConsZoo / sPZoo;
aPGrazSp = wPConsZoo / oPOMW;
aNConsZooSp = wNConsZoo / sNZoo;
aNGrazSp = wNConsZoo / oNOMW;
afDShootPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sDShootPhra /(sDRootPhra + sDShootPhra) ELSE 0.0 ENDIF;
rDSRPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sDShootPhra/sDRootPhra ELSE 0.0 ENDIF;
rPDShootPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sPShootPhra/sDShootPhra ELSE 0.0 ENDIF;
rNDShootPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sNShootPhra/sDShootPhra ELSE 0.0 ENDIF;
rPDRootPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sPRootPhra/sDRootPhra ELSE 0.0 ENDIF;
rNDRootPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sNRootPhra/sDRootPhra ELSE 0.0 ENDIF;
aLengShootPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sDShootPhra / cDStemPhra / cDensStemPhra ELSE 0.0 ENDIF;
bDayInitPhra = IF (Day LT 1.0 OR sTime LT BeginTime + 1.0) THEN 367 ELSEIF (uTm GE cTmInitPhra AND bDayInitPhra GT 366) THEN Day ELSE bDayInitPhra ENDIF;
aDAllPhra = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (Day LT bDayInitPhra) THEN 0.0 ELSEIF (Day LE bDayInitPhra + 1.0 / kDAllPhra) THEN fDAllPhra * sDRootPhra ELSE 0.0 ENDIF;
tDAllPhra = IF (FALSE EQ InclSeason) THEN 0.0 ELSEIF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (Day LT bDayInitPhra) THEN 0.0 ELSEIF (Day LE bDayInitPhra + 1.0 / kDAllPhra) THEN kDAllPhra * aDAllPhra ELSE 0.0 ENDIF;
tNTransPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN rNDRootPhra * tDAllPhra ELSE 0.0 ENDIF;
tPTransPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN rPDRootPhra * tDAllPhra ELSE 0.0 ENDIF;
aVNUptPhraMaxCr = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN MAX(0.0,cVNUptPhraMax * POW(cQ10ProdPhra , (0.1 *(uTm - cTmRef))) *(cNDPhraMax - rNDRootPhra) /(cNDPhraMax - cNDPhraMin)) ELSE 0.0 ENDIF;
ahNUptPhraS = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN aVNUptPhraMaxCr / cAffNUptPhra ELSE 0.0 ENDIF;
aVNUptPhraS = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN aVNUptPhraMaxCr * oNDissSM /(ahNUptPhraS + oNDissSM) ELSE 0.0 ENDIF;
tNUptPhraS = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN aVNUptPhraS * sDRootPhra ELSE 0.0 ENDIF;
tNUptNH4PhraS = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN sNH4SM / aNDissSM * tNUptPhraS ELSE 0.0 ENDIF;
tNUptNO3PhraS = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN tNUptPhraS - tNUptNH4PhraS ELSE 0.0 ENDIF;
tNUptShootPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN afDShootPhra * tNUptPhraS ELSE 0.0 ENDIF;
tNUptRootPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN tNUptPhraS - tNUptShootPhra ELSE 0.0 ENDIF;
aVPUptPhraMaxCr = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN MAX(0.0,cVPUptPhraMax * POW(cQ10ProdPhra , (0.1 *(uTm - cTmRef))) *(cPDPhraMax - rPDRootPhra) /(cPDPhraMax - cPDPhraMin)) ELSE 0.0 ENDIF;
ahPUptPhraS = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN aVPUptPhraMaxCr / cAffPUptPhra ELSE 0.0 ENDIF;
aVPUptPhraS = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN aVPUptPhraMaxCr * oPO4SM /(ahPUptPhraS + oPO4SM) ELSE 0.0 ENDIF;
tPUptPhraS = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN aVPUptPhraS * sDRootPhra ELSE 0.0 ENDIF;
tPUptShootPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN afDShootPhra * tPUptPhraS ELSE 0.0 ENDIF;
tPUptRootPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN tPUptPhraS - tPUptShootPhra ELSE 0.0 ENDIF;
uFunTmProdPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN POW(cQ10ProdPhra , (0.1 *(uTm - cTmRef))) ELSE 0.0 ENDIF;
ukDRespTmPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN kDRespPhra * POW(cQ10RespPhra , (0.1 *(uTm - cTmRef))) ELSE 0.0 ENDIF;
aMuPhotPhra = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (aLengShootPhra GE sDepthWM) THEN cMuPhraMax * uFunTmProdPhra * ufDay ELSE 0.0 ENDIF;
aNLimProdPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN (1.0 - cNDPhraMin / rNDRootPhra) * cNDPhraMax /(cNDPhraMax - cNDPhraMin) ELSE 0.0 ENDIF;
aPLimProdPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN (1.0 - cPDPhraMin / rPDRootPhra) * cPDPhraMax /(cPDPhraMax - cPDPhraMin) ELSE 0.0 ENDIF;
aNutLimPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN MIN(aNLimProdPhra,aPLimProdPhra) ELSE 0.0 ENDIF;
aMuPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN aMuPhotPhra * aNutLimPhra ELSE 0.0 ENDIF;
akDIncrPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN aMuPhotPhra - ukDRespTmPhra - kDMortShootPhra ELSE 0.0 ENDIF;
tDDensPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN MAX(0.0,akDIncrPhra / cDShootPhraMax * sDShootPhra * sDShootPhra) ELSE 0.0 ENDIF;
tDDensProdPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN aMuPhra / cMuPhraMax * tDDensPhra ELSE 0.0 ENDIF;
tDProdPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN aMuPhra * sDShootPhra - tDDensProdPhra ELSE 0.0 ENDIF;
tDProdShootPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN afDShootPhra * tDProdPhra ELSE 0.0 ENDIF;
tDProdRootPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN tDProdPhra - tDProdShootPhra ELSE 0.0 ENDIF;
tDRespShootPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN ukDRespTmPhra * sDShootPhra ELSE 0.0 ENDIF;
tDRespRootPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN ukDRespTmPhra * sDRootPhra ELSE 0.0 ENDIF;
tO2RespRootPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN molO2molC * cCPerDW * tDRespRootPhra * afOxySedM ELSE 0.0 ENDIF;
tO2FlowPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN tO2RespRootPhra ELSE 0.0 ENDIF;
bDayRealPhra = IF (Day LT 180.0) THEN 367 ELSEIF (ufDay LE fDayWin AND bDayRealPhra GT 366) THEN Day ELSE bDayRealPhra ENDIF;
aDRealPhra = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (Day LT bDayRealPhra) THEN 0.0 ELSEIF (Day LE bDayRealPhra + 1.0 / kDRealPhra) THEN fDRealPhra * sDShootPhra ELSE 0.0 ENDIF;
tDRealPhra = IF (FALSE EQ InclSeason) THEN 0.0 ELSEIF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (Day LT bDayRealPhra) THEN 0.0 ELSEIF (Day LE bDayRealPhra + 1.0 / kDRealPhra) THEN kDRealPhra * aDRealPhra ELSE 0.0 ENDIF;
tNRetrPhra = IF  (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN rNDShootPhra * tDRealPhra ELSE 0.0 ENDIF;
tPRetrPhra = IF  (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN rPDShootPhra * tDRealPhra ELSE 0.0 ENDIF;
tDMortShootPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN kDMortShootPhra * sDShootPhra ELSE 0.0 ENDIF;
tNMortShootPhra = IF  (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN rNDShootPhra * tDMortShootPhra ELSE 0.0 ENDIF;
tPMortShootPhra = IF  (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN rPDShootPhra * tDMortShootPhra ELSE 0.0 ENDIF;
tDMortRootPhra = IF  (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN kDMortRootPhra * sDRootPhra ELSE 0.0 ENDIF;
tNMortRootPhra = IF  (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN rNDRootPhra * tDMortRootPhra ELSE 0.0 ENDIF;
tPMortRootPhra = IF  (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN rPDRootPhra * tDMortRootPhra ELSE 0.0 ENDIF;
tDManShootPhra = IF (FALSE EQ InclMarsh OR fMarsh GT NearZero) THEN 0.0 ELSEIF ((Day GE cDayManPhra) AND (Day LT cDayManPhra + 1.0)) THEN fManPhra * sDShootPhra ELSE 0.0 ENDIF;
tNManShootPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN tDManShootPhra * rNDShootPhra ELSE 0.0 ENDIF;
tPManShootPhra = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN tDManShootPhra * rPDShootPhra ELSE 0.0 ENDIF;
tDIMSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN tDSetIMM ELSE 0.0 ENDIF;
tDHumSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN fRefrDetS * tDMinDetSM - tDMinHumSM ELSE 0.0 ENDIF;
tDDetSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN tDSetDetM - tDMinDetSM + tDSetPhytM + tDMortRootPhra ELSE 0.0 ENDIF;
vDeltaSM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN (tDIMSM / cRhoIM +(tDHumSM + tDDetSM) / cRhoOM)/(1.0 - bPorS) ELSE 0.0 ENDIF;
tDBurIMM = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (vDeltaSM GE 0.0) THEN ((tDHumSM + tDDetSM) +(cRhoOM / cRhoIM) * tDIMSM) / ((sDHumSM + sDDetSM) / sDIMSM + cRhoOM / cRhoIM) ELSE ((tDHumSM + tDDetSM) +(cRhoOM / cRhoIM) * tDIMSM) / (fDOrgSoil /(1.0 - fDOrgSoil) + cRhoOM / cRhoIM) ENDIF;
tDBurOMM = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (vDeltaSM GE 0.0) THEN (sDHumSM + sDDetSM) / sDIMSM * tDBurIMM ELSE fDOrgSoil /(1.0 - fDOrgSoil) * tDBurIMM ENDIF;
tDBurDetM = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (vDeltaSM GE 0.0) THEN sDDetSM /(sDHumSM + sDDetSM) * tDBurOMM ELSE 0.0 ENDIF;
tDBurHumM = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (vDeltaSM GE 0.0) THEN tDBurOMM - tDBurDetM ELSE tDBurOMM ENDIF;
tDBurTotM = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (vDeltaSM GE 0.0) THEN tDBurIMM + tDBurOMM ELSE tDBurIMM + tDBurOMM ENDIF;
tPBurHumM = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (vDeltaSM GE 0.0) THEN rPDHumSM * tDBurHumM ELSE cPDSoilOM * tDBurHumM ENDIF;
tPBurDetM = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (vDeltaSM GE 0.0) THEN rPDDetSM * tDBurDetM ELSE 0.0 ENDIF;
tPBurAIMM = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (vDeltaSM GE 0.0) THEN sPAIMSM / sDIMSM * tDBurIMM ELSE 0.0 ENDIF;
tPBurPO4M = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (vDeltaSM GE 0.0) THEN sPO4SM *(vDeltaSM / cDepthSM) ELSE cPO4Ground *(bPorSM * vDeltaSM) ENDIF;
tPBurTotM = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (vDeltaSM GE 0.0) THEN tPBurDetM + tPBurHumM + tPBurAIMM + tPBurPO4M ELSE tPBurHumM + tPBurAIMM + tPBurPO4M ENDIF;
tNBurHumM = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (vDeltaSM GE 0.0) THEN rNDHumSM * tDBurHumM ELSE cNDSoilOM * tDBurHumM ENDIF;
tNBurDetM = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (vDeltaSM GE 0.0) THEN rNDDetSM * tDBurDetM ELSE 0.0 ENDIF;
tNBurNH4M = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (vDeltaSM GE 0.0) THEN sNH4SM *(vDeltaSM / cDepthSM) ELSE cNH4Ground *(bPorSM * vDeltaSM) ENDIF;
tNBurNO3M = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (vDeltaSM GE 0.0) THEN sNO3SM *(vDeltaSM / cDepthSM) ELSE cNO3Ground *(bPorSM * vDeltaSM) ENDIF;
tNBurTotM = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (vDeltaSM GE 0.0) THEN tNBurDetM + tNBurHumM + tNBurNH4M + tNBurNO3M ELSE tNBurHumM + tNBurNH4M + tNBurNO3M ENDIF;
tSiBurDetM = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (vDeltaSM GE 0.0) THEN rSiDDetSM * tDBurDetM ELSE 0.0 ENDIF;
tSiBurTotM = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (vDeltaSM GE 0.0) THEN tSiBurDetM ELSE 0.0 ENDIF;
vDeltaWM = IF (FALSE EQ InclMarsh OR fMarsh LE NearZero) THEN 0.0 ELSEIF (ConstDepth EQ TRUE) THEN 0.0 ELSE - vDeltaSM ENDIF;
aRelDeltaWM = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN vDeltaWM / sDepthWM ELSE 0.0 ENDIF;
tDSetTot = tDSetIM + tDSetDet + tDSetPhyt;
tPSetTot = tPSetAIM + tPSetDet + tPSetPhyt;
tNSetTot = tNSetDet + tNSetPhyt;
tDResusTot = tDResusDead + tDResusPhytTot;
tPResusTot = tPResusDet + tPResusAIM + tPResusPhyt + tPResusPO4;
tNResusTot = tNResusDet + tNResusNH4 + tNResusNO3 + tNResusPhyt;
bTimeDred = IF (sTime GE cDredStart * DaysPerYear) THEN (FLOOR(TimeYears/cDredInterval) * cDredInterval) * DaysPerYear ELSE -9999.999 ENDIF;
aDepthStart = IF (sTime EQ bTimeDred) THEN sDepthW ELSE aDepthStart ENDIF;
akDredDepth = IF ((sTime GE bTimeDred) AND (sTime LT bTimeDred + cLengDred) AND (aDepthStart LE cDepthRef - cDepthS)) THEN (LN(cDepthRef / aDepthStart)) / cLengDred ELSE 0.0 ENDIF;
akDred = IF ((sTime GE bTimeDred) AND (sTime LT bTimeDred + cLengDred) AND (aDepthStart LE cDepthRef - cDepthS)) THEN (- LN(1.0 - fEffDred)) / cLengDred ELSE 0.0 ENDIF;
akDredBent = IF ((sTime GE bTimeDred) AND (sTime LT bTimeDred + cLengDred) AND (aDepthStart LE cDepthRef - cDepthS)) THEN (- LN(1.0 - fEffDredBent)) / cLengDred ELSE 0.0 ENDIF;
vDredDepthW = akDredDepth * sDepthW;
tDDredDetS = akDred * sDDetS;
tPDredDetS = akDred * sPDetS;
tNDredDetS = akDred * sNDetS;
tSiDredDetS = akDred * sSiDetS;
tPDredAIMS = akDred * sPAIMS;
bRhoSolidSoil = fDOrgSoil * cRhoOM +(1.0 - fDOrgSoil) * cRhoIM;
tDDredNetSoil = -(tDDredDetS / cRhoOM) * bRhoSolidSoil;
tDDredNetIMS = (1.0 - fDOrgSoil) * tDDredNetSoil;
tDDredNetHumS = fDOrgSoil * tDDredNetSoil;
tPDredNetHumS = cPDSoilOM * tDDredNetHumS;
tNDredNetHumS = cNDSoilOM * tDDredNetHumS;
tDDredDiatS = akDred * sDDiatS;
tPDredDiatS = akDred * sPDiatS;
tNDredDiatS = akDred * sNDiatS;
tDDredGrenS = akDred * sDGrenS;
tPDredGrenS = akDred * sPGrenS;
tNDredGrenS = akDred * sNGrenS;
tDDredBlueS = akDred * sDBlueS;
tPDredBlueS = akDred * sPBlueS;
tNDredBlueS = akDred * sNBlueS;
tDDredPhytS = tDDredDiatS+tDDredGrenS+tDDredBlueS;
tPDredPhytS = tPDredDiatS+tPDredGrenS+tPDredBlueS;
tNDredPhytS = tNDredDiatS+tNDredGrenS+tNDredBlueS;
tDDredBent = IF (InclWeb EQ TRUE) THEN akDredBent * sDBent ELSE 0.0 ENDIF;
tPDredBent = IF (InclWeb EQ TRUE) THEN akDredBent * sPBent ELSE 0.0 ENDIF;
tNDredBent = IF (InclWeb EQ TRUE) THEN akDredBent * sNBent ELSE 0.0 ENDIF;
tDDredVeg = akDred * sDVeg;
tPDredVeg = akDred * sPVeg;
tNDredVeg = akDred * sNVeg;
tDDredNetTot = tDDredDetS - tDDredNetSoil + tDDredPhytS + tDDredBent + tDDredVeg;
tPDredNetTot = tPDredDetS - tPDredNetHumS + tPDredAIMS + tPDredPhytS + tPDredBent + tPDredVeg;
tNDredNetTot = tNDredDetS - tNDredNetHumS + tNDredPhytS + tNDredBent + tNDredVeg;
tSiDredTot = tSiDredDetS + cSiDDiat * tDDredDiatS;
tDIMS = tDAbioIMS;
tDHumS = tDAbioHumS;
tDDetS = tDAbioDetS + tDPrimDetS + tDWebDetS + tDBedDetS;
vDeltaS = (tDIMS / cRhoIM +(tDHumS + tDDetS) / cRhoOM)/(1.0 - bPorS);
tDBurIM = IF (vDeltaS GE 0.0) THEN ((tDHumS + tDDetS) +(cRhoOM / cRhoIM) * tDIMS) / ((sDHumS + sDDetS) / sDIMS + cRhoOM / cRhoIM) ELSE ((tDHumS + tDDetS) +(cRhoOM / cRhoIM) * tDIMS) / (fDOrgSoil /(1.0 - fDOrgSoil) + cRhoOM / cRhoIM) ENDIF;
tDBurOM = IF (vDeltaS GE 0.0) THEN (sDHumS + sDDetS) / sDIMS * tDBurIM ELSE fDOrgSoil /(1.0 - fDOrgSoil) * tDBurIM ENDIF;
tDBurDet = IF (vDeltaS GE 0.0) THEN sDDetS /(sDHumS + sDDetS) * tDBurOM ELSE 0.0 ENDIF;
tDBurHum = IF (vDeltaS GE 0.0) THEN tDBurOM - tDBurDet ELSE tDBurOM ENDIF;
tDBurTot = IF (vDeltaS GE 0.0) THEN tDBurIM + tDBurOM ELSE tDBurIM + tDBurOM ENDIF;
tPBurHum = IF (vDeltaS GE 0.0) THEN rPDHumS * tDBurHum ELSE cPDSoilOM * tDBurHum ENDIF;
tPBurDet = IF (vDeltaS GE 0.0) THEN rPDDetS * tDBurDet ELSE 0.0 ENDIF;
tPBurAIM = IF (vDeltaS GE 0.0) THEN sPAIMS / sDIMS * tDBurIM ELSE 0.0 ENDIF;
tPBurPO4 = IF (vDeltaS GE 0.0) THEN sPO4S *(vDeltaS / cDepthS) ELSE cPO4Ground *(bPorS * vDeltaS) ENDIF;
tPBurTot = IF (vDeltaS GE 0.0) THEN tPBurDet + tPBurHum + tPBurAIM + tPBurPO4 ELSE tPBurHum + tPBurAIM + tPBurPO4 ENDIF;
tNBurHum = IF (vDeltaS GE 0.0) THEN rNDHumS * tDBurHum ELSE cNDSoilOM * tDBurHum ENDIF;
tNBurDet = IF (vDeltaS GE 0.0) THEN rNDDetS * tDBurDet ELSE 0.0 ENDIF;
tNBurNH4 = IF (vDeltaS GE 0.0) THEN sNH4S *(vDeltaS / cDepthS) ELSE cNH4Ground *(bPorS * vDeltaS) ENDIF;
tNBurNO3 = IF (vDeltaS GE 0.0) THEN sNO3S *(vDeltaS / cDepthS) ELSE cNO3Ground *(bPorS * vDeltaS) ENDIF;
tNBurTot = IF (vDeltaS GE 0.0) THEN tNBurDet + tNBurHum + tNBurNH4 + tNBurNO3 ELSE tNBurHum + tNBurNH4 + tNBurNO3 ENDIF;
tSiBurDet = IF (vDeltaS GE 0.0) THEN rSiDDetS * tDBurDet ELSE 0.0 ENDIF;
tSiBurTot = IF (vDeltaS GE 0.0) THEN tSiBurDet ELSE 0.0 ENDIF;
vDeltaW = IF (ConstDepth EQ TRUE) THEN 0.0 ELSE - vDeltaS ENDIF;
aRelDeltaW = (vDeltaW + vDredDepthW) / sDepthW;
tDMarsTotT = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN (- tDBurTotM - wDMinDetWM * sDepthWM -(1.0 - fRefrDetS) * tDMinDetSM - tDMinHumSM + tDProdPhra - tDRespShootPhra - tDRespRootPhra - tDManShootPhra) * fMarsh ELSE 0.0 ENDIF;
tPMarsTotT = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN (- tPInfPO4SM - tPDifGroundPO4M - tPBurTotM - tPChemPO4M - tPManShootPhra) * fMarsh ELSE 0.0 ENDIF;
tNMarsTotT = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN (- tNInfNH4SM - tNInfNO3SM - tNDifGroundNO3M - tNDifGroundNH4M - tNBurTotM - wNDenitWM * sDepthWM - tNDenitSM - tNManShootPhra) * fMarsh ELSE 0.0 ENDIF;
tSiMarsTotT = IF (InclMarsh EQ TRUE AND fMarsh GT NearZero) THEN - tSiBurDetM * fMarsh ELSE 0.0 ENDIF;
aDTotT = (sDIMW+sDDetW+sDDiatW+sDGrenW+sDBlueW+sDZoo) * sDepthW +aDFish+sDPisc+aDVeg +sDIMS+sDHumS+sDDetS+sDDiatS+sDGrenS+sDBlueS+sDBent + aDTotM;
aNTotT = (sNH4W+sNO3W+sNDetW+sNDiatW+sNGrenW+sNBlueW +sNZoo)*sDepthW +aNFish+aNPisc+aNVeg +sNH4S+sNO3S+sNDetS+sNHumS+sNDiatS+sNGrenS+sNBlueS +sNBent + aNTotM;
aPTotT = (sPO4W+sPDetW+sPDiatW+sPGrenW+sPBlueW +sPZoo+sPAIMW) * sDepthW +aPFish+aPPisc+aPVeg +sPO4S+sPDetS+sPHumS+sPDiatS+sPGrenS+sPBlueS +sPAIMS+sPBent + aPTotM;
aSiTotT = (sSiO2W + sSiDetW + cSiDDiat*sDDiatW) *sDepthW + sSiDetS + cSiDDiat*sDDiatS + aSiTotM;
aDError = aDTotT - sDExtTotT;
aNError = aNTotT - sNExtTotT;
aPError = aPTotT - sPExtTotT;
aSiError = aSiTotT - sSiExtTotT;
